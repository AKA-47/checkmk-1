#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def _parse_docker_container_network(info):
    import json
    return json.loads(" ".join(info[0]))


def inv_docker_container_network_networks(info, inventory_tree):
    parsed = _parse_docker_container_network(info)

    networks = inventory_tree.get_list("software.applications.docker.container.networks:")

    for network_name, network in parsed["Networks"].items():
        networks.append({
            "name": network_name,
            "network_id": network["NetworkID"],
            "ip_address": network["IPAddress"],
            "ip_prefixlen": network["IPPrefixLen"],
            "gateway": network["Gateway"],
            "mac_address": network["MacAddress"],
        })


inv_info["docker_container_network.networks"] = {
    "inv_function": inv_docker_container_network_networks,
}


def inv_docker_container_network_ports(info, inventory_tree):
    parsed = _parse_docker_container_network(info)

    ports = inventory_tree.get_list("software.applications.docker.container.ports:")

    for container_port_spec, host_ports in parsed["Ports"].items():
        port, proto = container_port_spec.split("/", 1)

        if host_ports:
            host_addresses = ", ".join(
                ["%s:%s" % (hp["HostIp"], hp["HostPort"]) for hp in host_ports])
        else:
            host_addresses = ""

        ports.append({
            "port": int(port),
            "protocol": proto,
            "host_addresses": host_addresses,
        })


inv_info["docker_container_network.ports"] = {
    "inv_function": inv_docker_container_network_ports,
}
