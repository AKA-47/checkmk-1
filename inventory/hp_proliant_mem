#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.plugins.agent_based.utils.hp_proliant import MAP_TYPES_MEMORY


def inv_hp_proliant_mem(info):
    node = inv_tree_list("hardware.memory.arrays:")

    infos = {}
    for _board_index, module_index, module_size_str, module_type, \
        _module_status, _module_condition, module_serial, cpu_num in info:
        infos.setdefault(
            (int(cpu_num) - 1, module_index), {
                "serial": module_serial,
                "type": MAP_TYPES_MEMORY.get(module_type, f"unknown({module_type})"),
            })

    # From dmidecode in case of dual host config we have to proof
    # if there's already an existing devices table
    try:
        for (cpu_num, module_index), module_info in infos.items():
            for entry in node[cpu_num].get("devices", []):
                if entry["set"] == module_index:
                    entry.update(module_info)
    except Exception:
        array = {"devices": []}
        for _board_index, module_index, module_size_str, module_type, \
            _module_status, _module_condition, module_serial, cpu_num in info:

            array["devices"].append({
                "size": float(module_size_str) * 1024,
                "serial": module_serial,
                "type": MAP_TYPES_MEMORY.get(module_type, f"unknown({module_type})"),
                "set": module_index,
                "locator": cpu_num
            })

        node.append(array)


# TODO: bring this back CMK-5976
#
#inv_info['hp_proliant_mem'] = {
#    'inv_function': inv_hp_proliant_mem,
#}
