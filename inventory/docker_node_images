#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def _split_subsections(info):
    subname = ''
    subsections = {}
    for row in info:
        if not row:
            continue
        if row[0].startswith('[[[') and row[0].endswith(']]]'):
            subname = row[0].strip('[]')
            continue
        subsections.setdefault(subname, []).append(row)
    return subsections


def parse_docker_node_images(info):

    subsections = _split_subsections(info)
    return parse_legacy_docker_node_images(subsections)  # pylint: disable=undefined-variable


def inv_docker_node_images(info, inventory_tree, status_data_tree):
    parsed = parse_docker_node_images(info)
    images = parsed.get("images", {})
    path = "software.applications.docker.images:"
    inv_node = inventory_tree.get_list(path)
    status_node = status_data_tree.get_list(path)

    for image_id, image in sorted(images.iteritems()):
        inv_node.append({
            "repotags": image.get("RepoTags", []),
            "repodigests": image.get("RepoDigests", []),
            "id": docker_get_short_id(image_id),  # pylint: disable=undefined-variable
            "creation": image["CreatedAt"],
            "size": image["VirtualSize"],
            "labels": docker_format_labels(image),  # pylint: disable=undefined-variable
        })

        status_node.append({
            "id": image["ID"],
            "amount_containers": image["amount_containers"],
        })

    containers = parsed.get("containers", {})
    status_node = status_data_tree.get_list("software.applications.docker.containers:")

    for container_id, container in sorted(containers.iteritems()):
        status_node.append({
            "id": docker_get_short_id(container_id),  # pylint: disable=undefined-variable
            "name": container["Names"],
            "creation": container["CreatedAt"],
            "labels": docker_format_labels(container),  # pylint: disable=undefined-variable
            "status": container["Status"],
        })


inv_info['docker_node_images'] = {  # pylint: disable=undefined-variable
    'includes': ['docker.include', 'legacy_docker.include'],
    'inv_function': inv_docker_node_images,
    'has_status_data': True,
}
