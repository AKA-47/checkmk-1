#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def inv_docker_node_images(info, inventory_tree, status_data_tree):
    images = parse_docker_node_images(info).get("images", {})
    path = "software.applications.docker.images:"
    inv_node = inventory_tree.get_list(path)
    status_node = status_data_tree.get_list(path)

    for image in sorted(images.itervalues(), key=lambda i: i["ID"]):
        inv_node.append({
            "repository"        : image["Repository"],
            "tag"               : image["Tag"],
            "id"                : image["ID"],
            "creation"          : image["CreatedAt"],
            "size"              : image["VirtualSize"],
            "labels"            : _format_labels(image.get("__labels__", {})),
        })

        status_node.append({
            "repository"        : image["Repository"],
            "tag"               : image["Tag"],
            "id"                : image["ID"],
            "amount_containers" : image["amount_containers"],
        })


inv_info['docker_node_images'] = {
    'includes'        : ['docker.include'],
    'inv_function'    : inv_docker_node_images,
    'has_status_data' : True,
}


def inv_docker_node_images_containers(info, inventory_tree, status_data_tree):
    containers = parse_docker_node_images(info).get("containers", {})
    status_node = status_data_tree.get_list("software.applications.docker.containers:")

    for container in sorted(containers.itervalues(), key=lambda c: c["ID"]):
        status_node.append({
            "id"                : container["ID"],
            "repository"        : container["Repository"],
            "tag"               : container["Tag"],
            "name"              : container["Names"],
            "creation"          : container["CreatedAt"],
            "labels"            : _format_labels(container["Labels"]),
            "status"            : container["Status"],
        })


def _format_labels(labels):
    if isinstance(labels, dict):
        labels = labels.iteritems()
    return ", ".join(["%s: %s" % item for item in labels])

# TODO: This section contains also information about the containers. We should
# better split it into multiple sections and add them to the different plugins
# using the extra_sections feature. In case this is not possible for the inventory
# plugins at the moment we should make it possible.
inv_info['docker_node_images.containers'] = {
    'includes'        : ['docker.include'],
    'inv_function'    : inv_docker_node_images_containers,
    'has_status_data' : True,
}
