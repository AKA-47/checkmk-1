#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
import json


def _split_subsections(info):
    subname = ''
    subsections = {}
    for row in info:
        if not row:
            continue
        if row[0].startswith('[[[') and row[0].endswith(']]]'):
            subname = row[0].strip('[]')
            continue
        subsections.setdefault(subname,  []).append(row)
    return subsections


def _parse_subsection_images(subinfo):
    '''parse output of "docker images"'''
    parsed = {}
    for row in subinfo:
        data = json.loads(" ".join(row))
        parsed.setdefault(data["ID"], data)
    return parsed


def _parse_subsection_labels(subinfo):
    return [json.loads(" ".join(row)) for row in subinfo]


def _parse_subsection_containers(subinfo):
    parsed = {}
    for row in subinfo:
        data = json.loads(" ".join(row))

        image_name = data["Image"]
        if ":" in image_name:
            data["Repository"], data["Tag"] = image_name.split(":", 1)
        else:
            data["Repository"], data["Tag"] = image_name, "latest"
        parsed[data["ID"]] = data
    return parsed


def parse_docker_node_images(info):
    '''parse output of <<<docker_node_images>>>

    $ echo "[[[images]]]"
    $ docker images
    $ echo "[[[image_labels]]]"
    $ IMAGE_IDS=$(docker images ls | awk 'BEGIN {ORF=" "} NR>1 {print $3}')
    $ docker image inspect "$IMAGE_IDS"
    $ echo "[[[containers]]]"
    $ docker ps --all
    '''
    subsections = _split_subsections(info)

    images = _parse_subsection_images(subsections.get("images", []))
    label_data = _parse_subsection_labels(subsections.get("images_labels", []))
    containers = _parse_subsection_containers(subsections.get("containers", []))

    for image_id, labels in label_data:
        image = images.get(image_id)
        if None not in (image_id, labels, image):
            image.setdefault("__labels__", {}).update(labels)

    mapping = {(i['Repository'], i['Tag']): i['ID'] for i in images}
    for c in containers:
        image_id = mapping.get((c["Repository"], c["Tag"]))
        image = images.get(image_id)
        if image is not None:
            image.setdefault("__containers__", []).append(c)

        lab = (p.split("=", 1) for p in c.get("Labels", []).split(","))
        c["Labels"] = list(lab)

    return {"images": images, "containers": containers}


def inv_docker_node_images(info, inventory_tree, status_data_tree):
    images = parse_docker_node_images(info).get("images", {})
    path = "software.applications.docker.images:"
    inv_node = inventory_tree.get_list(path)
    status_node = status_data_tree.get_list(path)

    for image_id, image in sorted(images.iteritems()):
        inv_node.append({
            "repository"        : image["Repository"],
            "tag"               : image["Tag"],
            "id"                : image_id,
            "creation"          : image["CreatedAt"],
            "size"              : image["VirtualSize"],
            "labels"            : _format_labels(image.get("__labels__", {}).items()),
        })

        status_node.append({
            "repository"        : image["Repository"],
            "tag"               : image["Tag"],
            "id"                : image_id,
            "amount_containers" : len(image.get("__containers__", [])),
        })


inv_info['docker_node_images'] = {
    'inv_function'    : inv_docker_node_images,
    'has_status_data' : True,
}


def inv_docker_node_images_containers(info, inventory_tree, status_data_tree):
    containers = parse_docker_node_images(info).get("containers", {})
    status_node = status_data_tree.get_list("software.applications.docker.containers:")

    for id_, container in sorted(containers.iteritems()):
        status_node.append({
            "id"                : id_,
            "repository"        : container["Repository"],
            "tag"               : container["Tag"],
            "name"              : container["Names"],
            "creation"          : container["CreatedAt"],
            "labels"            : _format_labels(container["Labels"]),
            "status"            : container["Status"],
        })


def _format_labels(labels):
    return ", ".join([ ": ".join(p) for p in labels ])

# TODO: This section contains also information about the containers. We should
# better split it into multiple sections and add them to the different plugins
# using the extra_sections feature. In case this is not possible for the inventory
# plugins at the moment we should make it possible.
inv_info['docker_node_images.containers'] = {
    'inv_function'    : inv_docker_node_images_containers,
    'has_status_data' : True,
}
