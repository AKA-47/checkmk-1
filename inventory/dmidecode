#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from typing import Callable, Dict, List, Mapping, Tuple, Union
# import of members will vanish after migration is complete.
from cmk.base.plugins.agent_based.inventory_dmidecode import (  #
    _parse_date, _parse_size, _parse_speed, _parse_voltage, Section,
)

Converter = Union[str, Tuple[str, Callable[[str], Union[str, float, None]]]]


def inv_dmidecode(section: Section) -> None:
    # There will be "Physical Memory Array" sections, each followed
    # by multiple "Memory Device" sections. Keep track of which belongs where:
    memory_array_number = 0
    for title, lines in section:
        memory_array_number += (title == "Physical Memory Array")
        _dispatch_subsection(title, lines, memory_array_number)


def _dispatch_subsection(
    title: str,
    lines: List[List[str]],
    memory_array_number: int,
) -> None:
    if title == "BIOS Information":
        _make_inventory_bios(lines)
        return

    if title == "System Information":
        _make_inventory_system(lines)
        return

    if title == "Chassis Information":
        _make_inventory_chassis(lines)
        return

    if title == "Processor Information":
        _make_inventory_processor(lines)
        return

    if title == "Physical Memory Array":
        _make_inventory_physical_mem_array(lines, memory_array_number)
        return

    if title == "Memory Device":
        _make_inventory_mem_device(lines, memory_array_number)
        return


def _make_inventory_bios(lines: List[List[str]]) -> None:
    inv_tree("software.bios.").update(
        _make_dict(
            lines, {
                "Vendor": "vendor",
                "Version": "version",
                "Release Date": ("date", _parse_date),
                "BIOS Revision": "revision",
                "Firmware Revision": "firmware",
            }))


def _make_inventory_system(lines: List[List[str]]) -> None:
    inv_tree("hardware.system.").update(
        _make_dict(
            lines, {
                "Manufacturer": "manufacturer",
                "Product Name": "product",
                "Version": "version",
                "Serial Number": "serial",
                "UUID": "uuid",
                "Family": "family",
            }))


def _make_inventory_chassis(lines: List[List[str]]) -> None:
    inv_tree("hardware.chassis.").update(
        _make_dict(lines, {
            "Manufacturer": "manufacturer",
            "Type": "type",
        }))


# Note: This node is also being filled by lnx_cpuinfo
def _make_inventory_processor(lines: List[List[str]]) -> None:
    vendor_map = {
        "GenuineIntel": "intel",
        "Intel(R) Corporation": "intel",
        "AuthenticAMD": "amd",
    }
    cpu_info = _make_dict(
        lines, {
            "Manufacturer": ("vendor", lambda v: vendor_map.get(v, v)),
            "Max Speed": ("max_speed", _parse_speed),
            "Voltage": ("voltage", _parse_voltage),
            "Status": "status",
        })

    if cpu_info.pop("Status", "") == "Unpopulated":
        # Only update our CPU information if the socket is populated
        return

    inv_tree("hardware.cpu.").update(cpu_info)


def _make_inventory_physical_mem_array(lines: List[List[str]], array_number: int) -> None:
    # We expect several possible arrays
    inv_tree(f"hardware.memory.array_{array_number}.").update(
        _make_dict(
            lines, {
                "Location": "location",
                "Use": "use",
                "Error Correction Type": "error_correction",
                "Maximum Capacity": ("maximum_capacity", _parse_size),
            }))


def _make_inventory_mem_device(lines: List[List[str]], array_number: int) -> None:
    device = _make_dict(
        lines,
        {
            "Total Width": "total_width",  # 64 bits
            "Data Width": "data_width",  # 64 bits
            "Form Factor": "form_factor",  # SODIMM
            "Set": "set",  # None
            "Locator": "locator",  # PROC 1 DIMM 2
            "Bank Locator": "bank_locator",  # Bank 2/3
            "Type": "type",  # DDR2
            "Type Detail": "type_detail",  # Synchronous
            "Manufacturer": "manufacturer",  # Not Specified
            "Serial Number": "serial",  # Not Specified
            "Asset Tag": "asset_tag",  # Not Specified
            "Part Number": "part_number",  # Not Specified
            "Speed": "speed",  # 667 MHz
            "Size": "size",  # 2048 MB
        },
    )
    if device["size"] == "No Module Installed":
        return

    devices_table = inv_tree_list(f"hardware.memory.array_{array_number}.devices:")

    # Convert speed and size into numbers
    device["speed"] = _parse_speed(device.get("speed", "Unknown"))
    device["size"] = _parse_size(device.get("size", "Unknown"))
    devices_table.append(device)


def _make_dict(
    lines: List[List[str]],
    converter_map: Mapping[str, Converter],
) -> Dict[str, Union[float, str, None]]:
    dict_: Dict[str, Union[float, str, None]] = {}
    for name, raw_value, *_rest in lines:
        if name not in converter_map or raw_value == "Not Specified":
            continue

        converter = converter_map[name]
        if isinstance(converter, str):
            dict_[converter] = raw_value
            continue

        label, transform = converter
        value = transform(raw_value)
        if value is not None:
            dict_[label] = value

    return dict_


inv_info['dmidecode'] = {
    # section already migrated!
    "inv_function": inv_dmidecode,
}
