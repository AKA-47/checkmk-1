#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def _parse_docker_node_network(info):
    import json
    return json.loads("".join([ l[0] for l in info ]))


def inv_docker_node_network_networks(info, inventory_tree, status_data_tree):
    parsed = _parse_docker_node_network(info)

    inventory_networks = inventory_tree.get_dict("software.applications.docker.networks.")
    status_networks = status_data_tree.get_dict("software.applications.docker.networks.")

    for network in parsed:
        labels = sorted(["%s: %s" % (k,v) for k,v in network.get("Labels", {}).items()])

        containers = []
        for container_id, container in network["Containers"].items():
            containers.append({
                "name"         : container["Name"],
                "id"           : container_id[:12],
                "ipv4_address" : container["IPv4Address"],
                "ipv6_address" : container["IPv6Address"],
                "mac_address"  : container["MacAddress"],
            })

        status_networks[network["Name"]] = {
            "name"              : network["Name"],
            "containers"        : containers,
        }

        inventory_networks[network["Name"]] = {
            "name"              : network["Name"],
            "host_ifname"       : network["Options"]["com.docker.network.bridge.name"],
            "network_id"        : network["Id"][:12],
            "scope"             : network["Scope"],
        }

        if labels:
            inventory_networks[network["Name"]]["labels"] = ", ".join(labels)


inv_info["docker_node_network.networks"] = {
    "inv_function": inv_docker_node_network_networks,
}
