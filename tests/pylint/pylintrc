[MASTER]
# Setup the python paths needed for our tests
init-hook=
    import sys, os
    test_path = os.environ.get("TEST_PATH", os.environ["HOME"] + "/git/check_mk/tests")
    sys.path.insert(0, test_path)
    import conftest
# load-plugins=testlib.pylint_cmk,testlib.pylint_checker_wrong_i18n
load-plugins=testlib.pylint_cmk,testlib.pylint_checker_localization
# TODO: Why do we need persistence?
persistent=yes

[MESSAGES CONTROL]
disable=
    abstract-method,
    arguments-differ,
    attribute-defined-outside-init,
    bad-continuation,
    bad-indentation,
    bad-whitespace,
    bare-except,
    blacklisted-name,
    broad-except,
    c-extension-no-member,
    cell-var-from-loop,
    consider-iterating-dictionary,
    consider-using-enumerate,
    consider-using-ternary,
    duplicate-code,
    eval-used,
    exec-used,
    fixme,
    global-statement,
    global-variable-undefined,
    inconsistent-return-statements,
    invalid-name,
    len-as-condition,
    line-too-long,
    logging-not-lazy,
    missing-docstring,
    multiple-imports,
    multiple-statements,
    no-else-return,
    no-self-use,
    protected-access,
    redefine-in-handler,
    redefined-argument-from-local,
    redefined-builtin,
    redefined-outer-name,
    reimported,
    relative-import,
    singleton-comparison,
    superfluous-parens,
    too-few-public-methods,
    too-many-ancestors,
    too-many-arguments,
    too-many-boolean-expressions,
    too-many-branches,
    too-many-instance-attributes,
    too-many-lines,
    too-many-locals,
    too-many-nested-blocks,
    too-many-public-methods,
    too-many-return-statements,
    too-many-statements,
    ungrouped-imports,
    unidiomatic-typecheck,
    unnecessary-semicolon,
    unneeded-not,
    unsubscriptable-object,
    unsupported-membership-test,
    unused-argument,
    unused-import,
    unused-variable,
    unused-wildcard-import,
    wildcard-import,
    wrong-import-order,
    wrong-import-position,
    #---------------------------------------------------------------------------
    # The 5 warnings below have already been fixed for non-web/ code. When the
    # upcoming reorganization of web/ has been landed, these should be fixed first.
    old-style-class,
    simplifiable-if-statement,
    unnecessary-lambda,
    unnecessary-pass,
    useless-super-delegation,
    #---------------------------------------------------------------------------
    # Enabling the two spelling-related checks increases pylints runtime from
    # 11 min to 40 min, so we better keep those disabled for normal runs.
    # wrong-spelling-in-comment,
    # wrong-spelling-in-docstring,

[TYPECHECK]
# rrdtool
#   Can not check methods / attributes of the rrdtool C module. Skipping related errors
#   like the following:
#   [E1101(no-member), create_rrd] Module 'rrdtool' has no 'create' member
# ldap
#   The Python ldap module gets a lot of constants from the C API which can not be found by pylint.
#   This results in a lot of these errors: "Module 'ldap' has no 'OPT_REFERRALS' member".
# netifaces
#   Can not check methods / attributes of the netifaces C module
ignored-modules = rrdtool,ldap,netifaces

[REPORTS]
output-format=cmk_colorized
msg-template={path}:{line}: [{msg_id}({symbol}), {obj}] {msg}

[FORMAT]
max-line-length=100

[VARIABLES]
# Needed by web code because of super globals. TODO Clean this up some day
additional-builtins=html
