[MASTER]
# Setup the python paths needed for our tests
init-hook=
    import sys, os
    test_path = os.environ.get("TEST_PATH", os.environ["HOME"] + "/git/check_mk/tests")
    sys.path.insert(0, test_path)
    import conftest
load-plugins=testlib.pylint_cmk,testlib.pylint_checker_localization
# TODO: Why do we need persistence?
persistent=yes
extension-pkg-whitelist=rrdtool,_ldap,netifaces,pymssql

[MESSAGES CONTROL]
disable=
    cell-var-from-loop,
    inconsistent-return-statements,
    logging-not-lazy,
    missing-docstring,
    multiple-imports,
    no-else-return,
    no-self-use,
    protected-access,
    reimported,
    relative-import,
    #---------------------------------------------------------------------------
    # We should really enable this, there could be some real exceptions waiting
    # to be thrown. But some work is needed first to sprinkle abc annotations
    # through our code and fix a few obscure places.
    abstract-method,
    #---------------------------------------------------------------------------
    # We should really enable this, there are real bugs lurking. Even if it
    # turns out that this is not the case in a few places: Doing things this way
    # is extremely bad OO practice.
    arguments-differ,
    #---------------------------------------------------------------------------
    # We should really enable this, there could be some typos hiding which are
    # real bugs. Just some work to do...
    unused-variable,
    #---------------------------------------------------------------------------
    # Enabling this would be very desirable, it vastly improves readability and
    # it might even be necessary for tools like mypy. Fixing this involves some
    # amount of relatively easy work, especially if we want to avoid code
    # duplication (introduce new classes, combine methods, etc.)
    attribute-defined-outside-init,
    #---------------------------------------------------------------------------
    # Enabling this would be very desirable, using type() instead of
    # isinstance() is a very bad idea most of the time, as it totally ignores
    # class hierarchies, breaking things in subtle ways.
    unidiomatic-typecheck,
    #---------------------------------------------------------------------------
    # This should really be fixed: Global variables are already a bad idea, but
    # depending on an implicit protocol to create them is an even worse one.
    global-variable-undefined,
    #---------------------------------------------------------------------------
    # We have tons of unused imports, it is just a matter of removing them and
    # leave those which have a "magic" purpose.
    unused-import,
    #---------------------------------------------------------------------------
    # Enabling these warnings would be nice, they are mostly a sign of sloppy
    # programming practice. In some cases, they can even hide bugs.
    bare-except,
    broad-except,
    #---------------------------------------------------------------------------
    # Enabling this would enhance readability quite a bit and it might even
    # uncover bugs. Fixing this is not rocket science, just some work: Roughly
    # 400 warnings in about 60 modules, but this can be fixed step by step.
    redefined-outer-name,
    #---------------------------------------------------------------------------
    # Enabling this would be nice, but not crucial. At the moment, we have quite
    # a few violations (about 200 in roughly 50 modules), so we postpone fixing
    # this.
    redefined-builtin,
    #---------------------------------------------------------------------------
    # Enabling this would be nice, but not crucial. At the moment, we have quite
    # a few violations (about 220 in roughly 40 modules), so we postpone fixing
    # this. Note that due to our arcane use of types, we need to be very careful
    # when fixing these warnings!
    len-as-condition,
    #---------------------------------------------------------------------------
    # We should really find out where wildcard imports are just laziness or
    # where they are actually needed (and why).
    unused-wildcard-import,
    wildcard-import,
    #---------------------------------------------------------------------------
    # Enabling this would be nice, but not crucial. At the moment, we have quite
    # a few violations, so we postpone fixing this. When we do it eventually, we
    # probably want to use "include-naming-hint=yes" in the BASIC section.
    invalid-name,
    #---------------------------------------------------------------------------
    # Enable these would improve readability, but currently there are quite a
    # few places to fix.
    wrong-import-position,
    wrong-import-order,
    #---------------------------------------------------------------------------
    # Enabling this would be nice, but not crucial. At the moment, we have quite
    # a few violations, so we postpone fixing this.
    singleton-comparison,
    #---------------------------------------------------------------------------
    # Enabling this would be nice, but not crucial. At the moment, we have quite
    # a few violations, so we postpone fixing this.
    unused-argument,
    #---------------------------------------------------------------------------
    # Alas, these maintenance/security nightmares are still part of our base
    # "technology"... :-/ Nevertheless, reducing their usage is a very worthy
    # goal.
    eval-used,
    exec-used,
    global-statement,
    #---------------------------------------------------------------------------
    # Enabling these would be nice, but given the current state of affairs
    # (gigantic modules with deeply nested humungous functions/methods), this
    # will be a non-trivial amount of work.
    too-few-public-methods,
    too-many-arguments,
    too-many-boolean-expressions,
    too-many-instance-attributes,
    too-many-lines,
    too-many-locals,
    too-many-nested-blocks,
    too-many-public-methods,
    too-many-return-statements,
    too-many-statements,
    #---------------------------------------------------------------------------
    # Enabling these would be nice, but at the moment pylint is a bit too dumb,
    # so it stumbles over e.g. initialization with None. It ignores control
    # flow, so even adding e.g. isinstance() guards wouldn't help, see:
    # https://github.com/PyCQA/pylint/issues/1498.
    unsubscriptable-object,
    unsupported-membership-test,
    #---------------------------------------------------------------------------
    # Our code is still full of FIXMEs/XXXs/TODOs, perhaps fixing or removing
    # them might be a good idea some day...
    fixme,
    #---------------------------------------------------------------------------
    # The warnigns below will probably fixed by YAPF.
    bad-continuation,
    bad-indentation,
    bad-whitespace,
    line-too-long,
    #---------------------------------------------------------------------------
    # Enabling the two spelling-related checks increases pylints runtime from
    # 11 min to 40 min, so we better keep those disabled for normal runs.
    # wrong-spelling-in-comment,
    # wrong-spelling-in-docstring,

[REPORTS]
output-format=cmk_colorized
msg-template={path}:{line}: [{msg_id}({symbol}), {obj}] {msg}

[FORMAT]
max-line-length=100
