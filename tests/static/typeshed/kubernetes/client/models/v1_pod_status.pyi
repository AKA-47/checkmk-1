# Stubs for kubernetes.client.models.v1_pod_status (Python 2)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class V1PodStatus:
    swagger_types: Any = ...
    attribute_map: Any = ...
    discriminator: Any = ...
    conditions: Any = ...
    container_statuses: Any = ...
    host_ip: Any = ...
    init_container_statuses: Any = ...
    message: Any = ...
    nominated_node_name: Any = ...
    phase: Any = ...
    pod_ip: Any = ...
    qos_class: Any = ...
    reason: Any = ...
    start_time: Any = ...
    def __init__(self, conditions: Optional[Any] = ..., container_statuses: Optional[Any] = ..., host_ip: Optional[Any] = ..., init_container_statuses: Optional[Any] = ..., message: Optional[Any] = ..., nominated_node_name: Optional[Any] = ..., phase: Optional[Any] = ..., pod_ip: Optional[Any] = ..., qos_class: Optional[Any] = ..., reason: Optional[Any] = ..., start_time: Optional[Any] = ...) -> None: ...
    @property
    def conditions(self): ...
    @conditions.setter
    def conditions(self, conditions: Any) -> None: ...
    @property
    def container_statuses(self): ...
    @container_statuses.setter
    def container_statuses(self, container_statuses: Any) -> None: ...
    @property
    def host_ip(self): ...
    @host_ip.setter
    def host_ip(self, host_ip: Any) -> None: ...
    @property
    def init_container_statuses(self): ...
    @init_container_statuses.setter
    def init_container_statuses(self, init_container_statuses: Any) -> None: ...
    @property
    def message(self): ...
    @message.setter
    def message(self, message: Any) -> None: ...
    @property
    def nominated_node_name(self): ...
    @nominated_node_name.setter
    def nominated_node_name(self, nominated_node_name: Any) -> None: ...
    @property
    def phase(self): ...
    @phase.setter
    def phase(self, phase: Any) -> None: ...
    @property
    def pod_ip(self): ...
    @pod_ip.setter
    def pod_ip(self, pod_ip: Any) -> None: ...
    @property
    def qos_class(self): ...
    @qos_class.setter
    def qos_class(self, qos_class: Any) -> None: ...
    @property
    def reason(self): ...
    @reason.setter
    def reason(self, reason: Any) -> None: ...
    @property
    def start_time(self): ...
    @start_time.setter
    def start_time(self, start_time: Any) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
