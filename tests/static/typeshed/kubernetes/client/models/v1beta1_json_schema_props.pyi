# Stubs for kubernetes.client.models.v1beta1_json_schema_props (Python 2)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class V1beta1JSONSchemaProps:
    swagger_types: Any = ...
    attribute_map: Any = ...
    discriminator: Any = ...
    ref: Any = ...
    schema: Any = ...
    additional_items: Any = ...
    additional_properties: Any = ...
    all_of: Any = ...
    any_of: Any = ...
    default: Any = ...
    definitions: Any = ...
    dependencies: Any = ...
    description: Any = ...
    enum: Any = ...
    example: Any = ...
    exclusive_maximum: Any = ...
    exclusive_minimum: Any = ...
    external_docs: Any = ...
    format: Any = ...
    id: Any = ...
    items: Any = ...
    max_items: Any = ...
    max_length: Any = ...
    max_properties: Any = ...
    maximum: Any = ...
    min_items: Any = ...
    min_length: Any = ...
    min_properties: Any = ...
    minimum: Any = ...
    multiple_of: Any = ...
    one_of: Any = ...
    pattern: Any = ...
    pattern_properties: Any = ...
    properties: Any = ...
    required: Any = ...
    title: Any = ...
    type: Any = ...
    unique_items: Any = ...
    def __init__(self, ref: Optional[Any] = ..., schema: Optional[Any] = ..., additional_items: Optional[Any] = ..., additional_properties: Optional[Any] = ..., all_of: Optional[Any] = ..., any_of: Optional[Any] = ..., default: Optional[Any] = ..., definitions: Optional[Any] = ..., dependencies: Optional[Any] = ..., description: Optional[Any] = ..., enum: Optional[Any] = ..., example: Optional[Any] = ..., exclusive_maximum: Optional[Any] = ..., exclusive_minimum: Optional[Any] = ..., external_docs: Optional[Any] = ..., format: Optional[Any] = ..., id: Optional[Any] = ..., items: Optional[Any] = ..., max_items: Optional[Any] = ..., max_length: Optional[Any] = ..., max_properties: Optional[Any] = ..., maximum: Optional[Any] = ..., min_items: Optional[Any] = ..., min_length: Optional[Any] = ..., min_properties: Optional[Any] = ..., minimum: Optional[Any] = ..., multiple_of: Optional[Any] = ..., _not: Optional[Any] = ..., one_of: Optional[Any] = ..., pattern: Optional[Any] = ..., pattern_properties: Optional[Any] = ..., properties: Optional[Any] = ..., required: Optional[Any] = ..., title: Optional[Any] = ..., type: Optional[Any] = ..., unique_items: Optional[Any] = ...) -> None: ...
    @property
    def ref(self): ...
    @ref.setter
    def ref(self, ref: Any) -> None: ...
    @property
    def schema(self): ...
    @schema.setter
    def schema(self, schema: Any) -> None: ...
    @property
    def additional_items(self): ...
    @additional_items.setter
    def additional_items(self, additional_items: Any) -> None: ...
    @property
    def additional_properties(self): ...
    @additional_properties.setter
    def additional_properties(self, additional_properties: Any) -> None: ...
    @property
    def all_of(self): ...
    @all_of.setter
    def all_of(self, all_of: Any) -> None: ...
    @property
    def any_of(self): ...
    @any_of.setter
    def any_of(self, any_of: Any) -> None: ...
    @property
    def default(self): ...
    @default.setter
    def default(self, default: Any) -> None: ...
    @property
    def definitions(self): ...
    @definitions.setter
    def definitions(self, definitions: Any) -> None: ...
    @property
    def dependencies(self): ...
    @dependencies.setter
    def dependencies(self, dependencies: Any) -> None: ...
    @property
    def description(self): ...
    @description.setter
    def description(self, description: Any) -> None: ...
    @property
    def enum(self): ...
    @enum.setter
    def enum(self, enum: Any) -> None: ...
    @property
    def example(self): ...
    @example.setter
    def example(self, example: Any) -> None: ...
    @property
    def exclusive_maximum(self): ...
    @exclusive_maximum.setter
    def exclusive_maximum(self, exclusive_maximum: Any) -> None: ...
    @property
    def exclusive_minimum(self): ...
    @exclusive_minimum.setter
    def exclusive_minimum(self, exclusive_minimum: Any) -> None: ...
    @property
    def external_docs(self): ...
    @external_docs.setter
    def external_docs(self, external_docs: Any) -> None: ...
    @property
    def format(self): ...
    @format.setter
    def format(self, format: Any) -> None: ...
    @property
    def id(self): ...
    @id.setter
    def id(self, id: Any) -> None: ...
    @property
    def items(self): ...
    @items.setter
    def items(self, items: Any) -> None: ...
    @property
    def max_items(self): ...
    @max_items.setter
    def max_items(self, max_items: Any) -> None: ...
    @property
    def max_length(self): ...
    @max_length.setter
    def max_length(self, max_length: Any) -> None: ...
    @property
    def max_properties(self): ...
    @max_properties.setter
    def max_properties(self, max_properties: Any) -> None: ...
    @property
    def maximum(self): ...
    @maximum.setter
    def maximum(self, maximum: Any) -> None: ...
    @property
    def min_items(self): ...
    @min_items.setter
    def min_items(self, min_items: Any) -> None: ...
    @property
    def min_length(self): ...
    @min_length.setter
    def min_length(self, min_length: Any) -> None: ...
    @property
    def min_properties(self): ...
    @min_properties.setter
    def min_properties(self, min_properties: Any) -> None: ...
    @property
    def minimum(self): ...
    @minimum.setter
    def minimum(self, minimum: Any) -> None: ...
    @property
    def multiple_of(self): ...
    @multiple_of.setter
    def multiple_of(self, multiple_of: Any) -> None: ...
    @property
    def one_of(self): ...
    @one_of.setter
    def one_of(self, one_of: Any) -> None: ...
    @property
    def pattern(self): ...
    @pattern.setter
    def pattern(self, pattern: Any) -> None: ...
    @property
    def pattern_properties(self): ...
    @pattern_properties.setter
    def pattern_properties(self, pattern_properties: Any) -> None: ...
    @property
    def properties(self): ...
    @properties.setter
    def properties(self, properties: Any) -> None: ...
    @property
    def required(self): ...
    @required.setter
    def required(self, required: Any) -> None: ...
    @property
    def title(self): ...
    @title.setter
    def title(self, title: Any) -> None: ...
    @property
    def type(self): ...
    @type.setter
    def type(self, type: Any) -> None: ...
    @property
    def unique_items(self): ...
    @unique_items.setter
    def unique_items(self, unique_items: Any) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
