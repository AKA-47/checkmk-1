# Stubs for kubernetes.client.models.v1_security_context (Python 2)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class V1SecurityContext:
    swagger_types: Any = ...
    attribute_map: Any = ...
    discriminator: Any = ...
    allow_privilege_escalation: Any = ...
    capabilities: Any = ...
    privileged: Any = ...
    proc_mount: Any = ...
    read_only_root_filesystem: Any = ...
    run_as_group: Any = ...
    run_as_non_root: Any = ...
    run_as_user: Any = ...
    se_linux_options: Any = ...
    def __init__(self, allow_privilege_escalation: Optional[Any] = ..., capabilities: Optional[Any] = ..., privileged: Optional[Any] = ..., proc_mount: Optional[Any] = ..., read_only_root_filesystem: Optional[Any] = ..., run_as_group: Optional[Any] = ..., run_as_non_root: Optional[Any] = ..., run_as_user: Optional[Any] = ..., se_linux_options: Optional[Any] = ...) -> None: ...
    @property
    def allow_privilege_escalation(self): ...
    @allow_privilege_escalation.setter
    def allow_privilege_escalation(self, allow_privilege_escalation: Any) -> None: ...
    @property
    def capabilities(self): ...
    @capabilities.setter
    def capabilities(self, capabilities: Any) -> None: ...
    @property
    def privileged(self): ...
    @privileged.setter
    def privileged(self, privileged: Any) -> None: ...
    @property
    def proc_mount(self): ...
    @proc_mount.setter
    def proc_mount(self, proc_mount: Any) -> None: ...
    @property
    def read_only_root_filesystem(self): ...
    @read_only_root_filesystem.setter
    def read_only_root_filesystem(self, read_only_root_filesystem: Any) -> None: ...
    @property
    def run_as_group(self): ...
    @run_as_group.setter
    def run_as_group(self, run_as_group: Any) -> None: ...
    @property
    def run_as_non_root(self): ...
    @run_as_non_root.setter
    def run_as_non_root(self, run_as_non_root: Any) -> None: ...
    @property
    def run_as_user(self): ...
    @run_as_user.setter
    def run_as_user(self, run_as_user: Any) -> None: ...
    @property
    def se_linux_options(self): ...
    @se_linux_options.setter
    def se_linux_options(self, se_linux_options: Any) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
