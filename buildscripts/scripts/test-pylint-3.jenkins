properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '14')),
])

def NODE = ''
def DOCKER_TAG_DEFAULT
withFolderProperties{
    NODE = env.BUILD_NODE
    DOCKER_TAG_DEFAULT = env.DOCKER_TAG_FOLDER
}

node (NODE) {
    docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
        def COMMON_IMAGE = docker.image('ubuntu-18.04-common')
        COMMON_IMAGE.pull()
        // The commands are executed with the 1001:1000 UID:GID (non-root).
        // This is the UID of the jenkins user on the node which does not exist
        // in the container. For the moment this does not look like a problem.
        // But it may be that we get to the point where we need an existing
        // user in the container.
        COMMON_IMAGE.inside('--ulimit nofile=1024:1024') {
            stage('checkout sources') {
                checkout(scm)
            }
            notify = load 'buildscripts/scripts/lib/notify.groovy'
            versioning = load 'buildscripts/scripts/lib/versioning.groovy'
        }
    }
}
try {
    node (NODE) {
        docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
            def TEST_IMAGE = docker.image('ubuntu-19.04:' + versioning.select_docker_tag(versioning.get_branch(scm), "", DOCKER_TAG_DEFAULT))
            TEST_IMAGE.pull()
            // The commands are executed with the 1001:1000 UID:GID (non-root).
            // This is the UID of the jenkins user on the node which does not exist
            // in the container. For the moment this does not look like a problem.
            // But it may be that we get to the point where we need an existing
            // user in the container.
            TEST_IMAGE.inside("--ulimit nofile=1024:1024 --init") {
               stage('test python3 linting') {
                   dir ('tests-py3') {
                       sh "make test-pylint"
                   }
               }
            }
        }
    }
}catch(Exception e) {
    notify.notify_error(e)
}
