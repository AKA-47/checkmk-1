def NODE = "both"

properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '14')),
  pipelineTriggers([upstream('pylint3')]),
])

node (NODE) {
    stage('checkout sources') {
        checkout(scm)
        notify = load 'buildscripts/scripts/lib/notify.groovy'
        str_mod = load 'buildscripts/scripts/lib/str_mod.groovy'
        withFolderProperties{
            TEST_CONTAINER = str_mod.strip_protocol_from_url(DOCKER_REGISTRY) + '/ubuntu-20.04:' + env.DOCKER_TAG_FOLDER
        }
    }
    try {
        stage("Execute Test") {
            docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
                def TEST_IMAGE = docker.image(TEST_CONTAINER)
                TEST_IMAGE.pull()
            }
            ENV_VARS = ["TEST_CONTAINER=${TEST_CONTAINER}"]
            withEnv(ENV_VARS) {
                sh("MYPY_ADDOPTS='--cobertura-xml-report=$WORKSPACE/mypy_reports --html-report=$WORKSPACE/mypy_reports/html' make -C $WORKSPACE/tests TEST_CONTAINER=${TEST_CONTAINER} test-mypy-docker")
            }
        }
        stage("Archive reports") {
            archiveArtifacts(artifacts: "mypy_reports/**")
        }
        stage("Analyse Issues") {
            publishIssues(
                issues:[scanForIssues(tool: clang())],
                trendChartType: 'TOOLS_ONLY',
                qualityGates: [
                    [
                        threshold: 1,
                        type: 'TOTAL',
                        unstable: false
                    ]
                ]
            )
        }
        stage("Publish coverage") {
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: false,
                keepAll: true,
                reportDir: 'mypy_reports/html',
                reportFiles: 'index.html',
                reportName: 'Typing coverage',
                reportTitles: ''
            ])
        }
    }catch(Exception e) {
        notify.notify_error(e)
    }
}
