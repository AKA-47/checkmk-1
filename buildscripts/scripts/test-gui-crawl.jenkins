properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '14')),
])

node {
    // First use one container with network access to check out the repository
    docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
        def COMMON_IMAGE = docker.image('ubuntu-18.04-common')
        COMMON_IMAGE.pull()
        // The commands are executed with the 1001:1000 UID:GID (non-root).
        // This is the UID of the jenkins user on the node which does not exist
        // in the container. For the moment this does not look like a problem.
        // But it may be that we get to the point where we need an existing
        // user in the container.
        COMMON_IMAGE.inside('--ulimit nofile=1024:1024') {
            stage('checkout sources') {
                checkout(scm)
            }
        }
    }

    // Then execute the crawl test in a container without network access
    docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
        def COMMON_IMAGE = docker.image('ubuntu-18.04-common')
        COMMON_IMAGE.pull()
        // The commands are executed with the 1001:1000 UID:GID (non-root).
        // This is the UID of the jenkins user on the node which does not exist
        // in the container. For the moment this does not look like a problem.
        // But it may be that we get to the point where we need an existing
        // user in the container.
        // The download credentials are needed by the image build part
        COMMON_IMAGE.inside("--group-add=docker --ulimit nofile=1024:1024 -v /var/run/docker.sock:/var/run/docker.sock -v $JENKINS_HOME/.cmk-credentials:/.cmk-credentials") {
            try {
                stage('Test GUI crawl') {
                    dir ('tests-py3') {
                        sh "env"
                        sh "RESULT_PATH='${WORKSPACE}/test-results' make test-gui-crawl-docker"
                    }
                }
            }
            finally {
                archiveArtifacts("test-results/results/**")
            }
        }
    }
}
