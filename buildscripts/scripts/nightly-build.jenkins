import java.text.SimpleDateFormat

properties([
  parameters([
    string(name: 'DISTROS', defaultValue: DISTRO_LIST_MASTER, description: 'List of targeted distros' )
  ])
])

def PACKAGE_BUILDS = [:]
def AGENT_LIST = ["linux-64bit", "linux-32bit", "windows" ]
def AGENT_BUILDS= [:]

DISTRO_LIST = DISTROS.split(' ');

println("Building for the following Distros:")
println(DISTRO_LIST)
currentBuild.description = '\nBuilding for the following Distros:\n' + DISTRO_LIST

def DOCKER_BUILDS = [:]
def dateFormat = new SimpleDateFormat("yyyy.MM.dd")
def date = new Date()
def CMK_VERS = dateFormat.format(date)
def DAILY_DATA = '/var/jenkins_home/daily-data/' + BRANCH_NAME.replaceAll("/","-") + '/' + CMK_VERS

node {
    docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
        IMAGE = 'ubuntu-18.04-common'
        docker.image(IMAGE).pull()
        docker.image(IMAGE).inside('-u 0:0 -v /var/jenkins_home/daily-data/:/var/jenkins_home/daily-data/ --network ci_local-infra') {
            stage('checkout sources') {
               sh "rm -rf ${DAILY_DATA}"
               sh 'rm -rf *'
               // Add line to delete folders older than 10 days
               dir("${DAILY_DATA}/git") {
                    checkout(scm)
                }
                // Actually Dependent on Edition. For now set to Enterprise!
                sh """
                    cd ${DAILY_DATA}/git
                    rm -rf managed
                    make NEW_VERSION=${CMK_VERS} setversion
                """
            }
        }
    }
}

AGENT_LIST.each { AGENT ->
    AGENT_BUILDS['build agent ' + AGENT] = {
        node {
            docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
                docker.image('agent-builder-' + AGENT).pull()
                docker.image('agent-builder-' + AGENT).inside("-u 0:0 -v ${DAILY_DATA}:${DAILY_DATA} --privileged --network ci_local-infra") {
                    stage('build agent ' + AGENT) {
                        if (AGENT == 'linux-64bit') {
                            AGENT = ''
                        } else if (AGENT == 'linux-32bit') {
                            AGENT = '-32'
                        } else {
                            AGENT = '-windows'
                        }

                        sh 'rm -rf *'
                        sh "mkdir agent-updater${AGENT}-work agent-updater${AGENT}-dest"
                        sh "mount -t overlay overlay -o lowerdir=${DAILY_DATA}/git,upperdir=${WORKSPACE}/agent-updater${AGENT}-dest,workdir=${WORKSPACE}/agent-updater${AGENT}-work ${WORKSPACE}/agent-updater${AGENT}-dest"
                        if (AGENT == '-windows') {
                            sh script: """
                                cd agent-updater${AGENT}-dest/agents/windows/
                                CHROOT_BUILD_DIR=${WORKSPACE}/agent-updater${AGENT}-dest \
                                    CHROOT_NAME="agent-builder-windows" \
                                    ./build-agent
                            """
                            sh script: """
                                cd agent-updater${AGENT}-dest/enterprise/agents/windows/plugins
                                CHROOT_BUILD_DIR=${WORKSPACE}/agent-updater${AGENT}-dest \
                                    make
                            """
                            sh """
                                mkdir -p ${DAILY_DATA}/agent-updater
                                cp agent-updater${AGENT}-dest/agents/windows/check_mk_agent* ${DAILY_DATA}/agent-updater
                                cp agent-updater${AGENT}-dest/enterprise/agents/windows/plugins/cmk-update-agent.exe ${DAILY_DATA}/agent-updater
                            """
                        } else { // Linux Agents (64 and 32 bit)
                            sh script: """cd agent-updater${AGENT}-dest/enterprise/agents/plugins \
                                && CHROOT_BUILD_DIR=${WORKSPACE}/agent-updater${AGENT}-dest \
                                    BITNESS_SUFFIX='${AGENT}' \
                                    make
                            """
                            sh """
                                mkdir -p ${DAILY_DATA}/agent-updater${AGENT}
                                cp agent-updater${AGENT}-dest/enterprise/agents/plugins/cmk-update-agent${AGENT} ${DAILY_DATA}/agent-updater
                            """
                        }
                        sh "until umount agent-updater${AGENT}-dest; do sleep 1; done"
                    }
                }
            }
        }
    }
}
parallel AGENT_BUILDS

node {
    docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
        IMAGE = 'ubuntu-18.04-common'
        docker.image(IMAGE).pull()
        docker.image(IMAGE).inside("-u 0:0 -v ${DAILY_DATA}:${DAILY_DATA} --network ci_local-infra") {
            stage('create tarball') {
               dir("${DAILY_DATA}/git") {
                    sh "cp ${DAILY_DATA}/agent-updater/cmk-update-agent enterprise/agents/plugins/"
                    sh "cp ${DAILY_DATA}/agent-updater/cmk-update-agent-32 enterprise/agents/plugins/"
                    sh "cp ${DAILY_DATA}/agent-updater/cmk-update-agent.exe enterprise/agents/windows/plugins/"
                    sh "cp ${DAILY_DATA}/agent-updater/check_mk_agent.msi agents/windows"
                    sh "cp ${DAILY_DATA}/agent-updater/check_mk_agent*.exe agents/windows"
                    sh 'make dist || cat /root/.npm/_logs/*-debug.log'
                }
            }
        }
    }
}

DISTRO_LIST.each { DISTRO ->
    PACKAGE_BUILDS[DISTRO] = {
        node {
            docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
                docker.image(DISTRO).pull()
                docker.image(DISTRO).inside("-u 0:0 -v ${DAILY_DATA}:${DAILY_DATA} --privileged --network ci_local-infra") {
                    stage('build' + DISTRO + ' package') {
                        sh 'rm -rf *'
                        sh 'mkdir work dest'
                        sh "mount -t overlay overlay -o lowerdir=${DAILY_DATA}/git,upperdir=${WORKSPACE}/dest,workdir=${WORKSPACE}/work ${WORKSPACE}/dest"
                        dir('dest') {
                            sh """
                                case $DISTRO in
                                    centos*|rh*|sles*|opensuse*)
                                        make -C omd rpm
                                        ;;
                                    cma*)
                                        make -C cma
                                        ;;
                                    *)
                                        DEBFULLNAME='Check_MK Team' DEBEMAIL='feedback@check-mk.org' make -C omd deb
                                        ;;
                                esac
                            """
                        }
                        sh 'until umount dest; do sleep 1; done'
                        sh "rm -rf ${DAILY_DATA}/${DISTRO}-{dest,work}"
                        sh "mv dest ${DAILY_DATA}/${DISTRO}-dest"
                        sh "mv work ${DAILY_DATA}/${DISTRO}-work"
                        sh "ls -lah ${DAILY_DATA}"
                    }
                }
            }
        }
    }
}
parallel PACKAGE_BUILDS

node {
    docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
        IMAGE = 'ubuntu-18.04-common'
        docker.image(IMAGE).pull()
        docker.image(IMAGE).inside("-u 0:0 -v ${DAILY_DATA}:${DAILY_DATA} --network ci_local-infra") {
            stage('Archive artifacts') {
                dir("${DAILY_DATA}/downloads") {
                    sh "cp ${DAILY_DATA}/*-dest/check-mk-enterprise-*.{deb,rpm} ."
                    archiveArtifacts "*"
                }
            }
        }
    }
}
