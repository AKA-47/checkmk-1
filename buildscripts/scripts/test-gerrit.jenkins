throttle(['Gerrit']) {
properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '200')),
])

def NODE = ''

withFolderProperties {
    NODE = env.BUILD_NODE
    // There is no way to determine the Docker Tag by branch or build in Gerrit jobs
    // Therefore the folder tag is selected directly
    TEST_CONTAINER = DOCKER_REGISTRY + '/ubuntu-20.04:' + env.DOCKER_TAG_FOLDER
}

node (NODE) {
    def WORKSPACE = pwd()
    def RESULTS = WORKSPACE + "/results"

    try {
        stage("Auschecken: Checkmk") {
            checkout(scm)
            sh("rm -rf ${RESULTS}; mkdir ${RESULTS}")
            test_gerrit_helper = load 'buildscripts/scripts/lib/gerrit_stages.groovy'
            str_mod = load 'buildscripts/scripts/lib/str_mod.groovy'
            withFolderProperties {
                TEST_CONTAINER = str_mod.strip_protocol_from_url(DOCKER_REGISTRY) + '/ubuntu-20.04:' + env.DOCKER_TAG_FOLDER
            }
        }

        // Creates a \n separated list of changed files
        // We get realpaths here. However, the scripts/find-python-files calls
        // later work with logical paths which would not match the realpaths
        // produced here. We try to make both match here... hope it is enough.
        // In case things get complicated here we should try to move the logic
        // to some kind of helper script/function to improve maintainability
        def CHANGED_FILES_REL = sh(script: "git diff-tree --no-commit-id --name-only -r ${GERRIT_PATCHSET_REVISION} | sed -E 's#(enterprise|managed)/cmk/#cmk/#g'", returnStdout: true).toString().trim()
        def CHANGED_FILES_ABS = sh(script: "echo '${CHANGED_FILES_REL}' | sed 's|^|${WORKSPACE}/|g'", returnStdout: true).toString().trim()

        // Gather the list of changed python files
        def GREP_PATTERNS = sh(script: "echo '${CHANGED_FILES_ABS}' | sed 's/^/-e /g'", returnStdout: true).toString().trim().replaceAll("[\\n]+"," ");
        def CHANGED_PYTHON_FILES = sh(script: "scripts/find-python-files | grep -h ${GREP_PATTERNS} - || true", returnStdout: true).toString().trim()
        def CHANGED_PYLINT_RC_FILE = sh(script: "echo '$CHANGED_FILES_ABS' | grep -h '${WORKSPACE}/.pylintrc' - || true", returnStdout: true).toString().trim()

        // Gather the list of changed agent plugins
        def CHANGED_AGENT_PLUGINS = sh(script: "echo '${CHANGED_FILES_REL}' | grep '^agents/plugins/' || true", returnStdout: true).toString().trim().replaceAll("[\\n]+"," ");

        // Gather the list of changed agent plugins unit tests
        def CHANGED_AGENT_PLUGINS_TESTS = sh(script: "echo '${CHANGED_FILES_REL}' | grep '^tests/agent-plugin-unit/' || true", returnStdout: true).toString().trim().replaceAll("[\\n]+"," ");

        // Gather the list of changed livestatus / core files
        def CHANGED_CORE_FILES = sh(script: "echo '${CHANGED_FILES_REL}' | grep -e '^livestatus' -e '^enterprise/core' || true", returnStdout: true).toString().trim().replaceAll("[\\n]+"," ");

        // Gather the list of changed JavaScript and CSS files in raw and enterprise edition
        def CHANGED_JS_FILES = sh(script: "echo '${CHANGED_FILES_REL}' | grep 'web/htdocs/js/' || true", returnStdout: true).toString().trim().replaceAll("[\\n]+"," ");
        def CHANGED_CSS_FILES = sh(script: "echo '${CHANGED_FILES_REL}' | grep 'web/htdocs/themes/' | sed '/\\.scss\$/!d' || true", returnStdout: true).toString().trim().replaceAll("[\\n]+"," ");

        def CHANGED_SW_DOC_FILES = sh(script: "echo '${CHANGED_FILES_REL}' | grep 'doc/documentation/' || true", returnStdout: true).toString().trim().replaceAll("[\\n]+"," ");

        // this variable is needed as long as we have base plugins that are
        // concantenated for pylint (See tests/pylint/test_pylint.py)
        def WORKDIR="${WORKSPACE}/tmp"

        print "Changed Python files: ${CHANGED_PYTHON_FILES}"
        print "Changed pylintrc file: ${CHANGED_PYLINT_RC_FILE}"
        print "Changed agent plugins: ${CHANGED_AGENT_PLUGINS}"
        print "Changed agent plugins tests: ${CHANGED_AGENT_PLUGINS_TESTS}"
        print "Changed core files: ${CHANGED_CORE_FILES}"
        print "Changed JS files: ${CHANGED_JS_FILES}"
        print "Changed CSS files: ${CHANGED_CSS_FILES}"
        print "Changed SW Documentation files: ${CHANGED_SW_DOC_FILES}"

        //Add description to the build
        test_gerrit_helper.desc_init()
        test_gerrit_helper.desc_add_line(GERRIT_CHANGE_SUBJECT)
        test_gerrit_helper.desc_add_table()
        test_gerrit_helper.desc_add_row('Stage', 'Status')

        // todo: --no-skip=False und die meisten Variablen sind redundant und kommen noch weg
        //       notwendig sind nur noch Werte, die für die Variablengenerierung benötigt werden
        sh("""export TEST_CONTAINER=${TEST_CONTAINER} && \
                scripts/run-in-docker.sh \
                  scripts/run-pipenv run \
                    buildscripts/scripts/verify_changes \
                    --no-skip=False \
                    --write-file=${RESULTS}/stages.json \
                    -e "RESULTS=${RESULTS}" \
                    -e "WORKSPACE=${WORKSPACE}" \
                    -e "WORKDIR=${WORKDIR}" \
                    -e "GERRIT_PATCHSET_REVISION=${GERRIT_PATCHSET_REVISION}" \
                    -e "CHANGED_PYTHON_FILES=${CHANGED_PYTHON_FILES}" \
                    -e "CHANGED_PYLINT_RC_FILE=${CHANGED_PYLINT_RC_FILE}" \
                    -e "CHANGED_AGENT_PLUGINS=${CHANGED_AGENT_PLUGINS}" \
                    -e "CHANGED_AGENT_PLUGINS_TESTS=${CHANGED_AGENT_PLUGINS_TESTS}" \
                    -e "CHANGED_CORE_FILES=${CHANGED_CORE_FILES}" \
                    -e "CHANGED_JS_FILES=${CHANGED_JS_FILES}" \
                    -e "CHANGED_CSS_FILES=${CHANGED_CSS_FILES}" \
                    -e "CHANGED_SW_DOC_FILES=${CHANGED_SW_DOC_FILES}" \
                    buildscripts/scripts/stages.yml
        """);
        def stages = test_gerrit_helper.loadJson("${RESULTS}/stages.json");

        println(">>> stage configuration")
        sh("cat ${RESULTS}/stages.json");
        println("<<< stage configuration")

        stages.each { item ->
            test_gerrit_helper.create_stage(item);
        }
    } catch (e) {
        currentBuild.result = "FAILED"
        throw e
    } finally {
        stage("Analyse Issues") {
            def CLANG = scanForIssues(tool: clang(
                pattern: "results/*-tidy.txt"))
            def GCC = scanForIssues(tool: gcc(
                pattern: "results/*.iwyu.txt,results/neb-cmc-compile.txt,results/*neb-cmc.txt,results/python-yapf.txt"))
            def PYLINT = scanForIssues(tool: pyLint(
                pattern: "results/pylint.txt"))
            def MYPY = scanForIssues(tool: myPy(
                pattern: "results/mypy.xml"))
            def CPPCHECK = scanForIssues(tool: cppCheck(
                pattern: 'results/cppcheck-*.xml'))

            publishIssues(
                issues:[CLANG,GCC,PYLINT,MYPY,CPPCHECK],
                trendChartType: 'TOOLS_ONLY',
                qualityGates: [[threshold: 1, type: 'TOTAL', unstable: false]])
            xunit([Custom(
                customXSL: "$JENKINS_HOME/userContent/xunit/JUnit/0.1/pytest-xunit.xsl",
                deleteOutputFiles: false,
                failIfNotNew: true,
                pattern: "results/*junit.xml",
                skipNoTestFiles: true,
                stopProcessingIfError: true)])

            archiveArtifacts(allowEmptyArchive: true, artifacts: 'results/*')
        }
    }
}
}
