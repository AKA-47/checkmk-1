#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# NOTE: Devices of type 3850 with firmware versions 3.2.0SE, 3.2.1, 3.2.2
# have been observed to display a tenth of the actual temperature value.
# A firmware update on the device fixes this.


def parse_cisco_temperature(info):
    # CISCO-ENTITY-SENSOR-MIB entSensorType
    cisco_sensor_types = {
        "1": "other",
        "2": "unknown",
        "3": "voltsAC",
        "4": "voltsDC",
        "5": "amperes",
        "6": "watts",
        "7": "hertz",
        "8": "celsius",
        "9": "parentRH",
        "10": "rpm",
        "11": "cmm",
        "12": "truthvalue",
        "13": "specialEnum",
        "14": "dBm",
    }

    # CISCO-ENTITY-SENSOR-MIB::entSensorScale
    cisco_entity_exponents = {
        "1": -24,  #     1:yocto
        "2": -21,  #     2:zepto
        "3": -18,  #     3:atto
        "4": -15,  #     4:femto
        "5": -12,  #     5:pico
        "6": -9,  #     6:nano
        "7": -6,  #     7:micro
        "8": -3,  #     8:milli
        "9": 0,  #     9:units
        "10": 3,  #     10:kilo
        "11": 6,  #     11:mega
        "12": 9,  #     12:giga
        "13": 12,  #     13:tera
        "14": 18,  #     14:exa
        "15": 15,  #     15:peta
        "16": 21,  #     16:zetta
        "17": 24,  #     17:yotta
    }

    # CISCO-ENTITY-SENSOR-MIB::entSensorStatus
    map_states = {
        "1": (0, "OK"),
        "2": (3, "unavailable"),
        "3": (3, "non-operational"),
    }

    # CISCO-ENVMON-MIB
    map_envmon_states = {
        '1': (0, "normal"),
        '2': (1, "warning"),
        '3': (2, "critical"),
        '4': (2, "shutdown"),
        '5': (3, "not present"),
        '6': (3, "not functioning"),  # TODO: fix this to CRIT
    }

    description_info, state_info, levels_info, perfstuff = info

    # Create dict of sensor descriptions
    descriptions = dict(description_info)

    # Create dict with thresholds
    thresholds = {}
    for sensor_id, sensortype_id, scalecode, magnitude, value, sensorstate in state_info:
        thresholds.setdefault(sensor_id, [])

    for endoid, level in levels_info:
        # endoid is e.g. 21549.9 or 21459.10
        sensor_id, _subid = endoid.split('.')
        thresholds.setdefault(sensor_id, []).append(level)

    # Parse OIDs described by CISCO-ENTITY-SENSOR-MIB
    entity_parsed = {}
    for sensor_id, sensortype_id, scalecode, magnitude, value, sensorstate in state_info:
        sensortype = cisco_sensor_types.get(sensortype_id)
        if sensortype not in ("dBm", "celsius"):
            continue

        if sensor_id in descriptions:
            descr = descriptions[sensor_id]
        else:
            descr = sensor_id

        if not descr:
            continue

        entity_parsed.setdefault(sensortype_id, {})
        sensor_attrs = {
            'descr': descr,
            'raw_dev_state': sensorstate,  # used in discovery function
            'dev_state': map_states.get(sensorstate, (3, 'unknown[%s]' % sensorstate))
        }

        # TODO: entity_parsed contains sensors with status OK only and means sensors with non-OK
        # status are not inventorized.
        if sensorstate == '1':
            scale = 10**int(magnitude)
            scale *= 10**(-1 * cisco_entity_exponents[scalecode])
            sensor_attrs['reading'] = float(value) / scale
            # All sensors have 4 threshold values.
            # Map thresholds [crit_upper, warn_upper, crit_lower, warn_lower] to
            # dev_levels (warn_upper, crit_upper, warn_lower, crit_lower) conform
            # with check_levels() signature.
            # e.g. [u'75000', u'70000', u'-5000', u'0'] -> (70000, 75000, 0, -5000)
            # For temperature sensors only the upper levels are considered.
            # e.g. [u'75000', u'70000, u'-5000', u'0'] -> (70000, 75000)
            # In case devices do no validation when thresholds are set this could result
            # in threshold values in a wrong order. To keep the behaviour consistent
            # to temperature sensors the device levels are ordered accoringly.
            if sensortype == "dBm" and len(thresholds[sensor_id]) == 4:
                unsorted_thresholds = thresholds[sensor_id][0:4]
                converted_thresholds = [float(t) / scale for t in unsorted_thresholds]
                #list(map(lambda x: x / scale, map(float, unsorted_thresholds)))  # pylint: disable=cell-var-from-loop
                sorted_thresholds = sorted(converted_thresholds, key=float)
                opt_crit_upper, opt_warn_upper, opt_crit_lower, opt_warn_lower = sorted_thresholds[
                    3], sorted_thresholds[2], sorted_thresholds[0], sorted_thresholds[1]
                dev_levels = (opt_warn_upper, opt_crit_upper, opt_warn_lower, opt_crit_lower)
            elif sensortype == "celsius" and len(thresholds[sensor_id]) == 4:
                temp_crit_upper_raw, temp_warn_upper_raw = thresholds[sensor_id][0:2]
                # Some devices deliver these values in the wrong order. In case the devices
                # do no validation when thresholds are set this could result in values in a
                # wrong oder as well. Device levels are assigned accoring to their size.
                dev_levels = (
                    min(float(temp_warn_upper_raw) / scale,
                        float(temp_crit_upper_raw) / scale),
                    max(float(temp_warn_upper_raw) / scale,
                        float(temp_crit_upper_raw) / scale),
                )
            else:
                dev_levels = None
            sensor_attrs['dev_levels'] = dev_levels
            entity_parsed[sensortype_id].setdefault(sensor_id, sensor_attrs)

    parsed = {}
    for sensor_id, statustext, temp, max_temp, state in perfstuff:
        parsed.setdefault(sensortype_id, {})
        if sensor_id in descriptions and sensor_id in entity_parsed.get(sensortype_id, {}):
            # if this sensor is already in the dictionary, ensure we use the same name
            item = descriptions[sensor_id]
            prev_description = cisco_sensor_item(statustext, sensor_id)
            # also register the name we would have used up to 1.2.8b4, so we can give
            # the user a proper info message.
            # It's the little things that show you care
            parsed[sensortype_id][prev_description] = {"obsolete": True}
        else:
            item = cisco_sensor_item(statustext, sensor_id)

        # dev_state: sensor type specific status overrides less specific sensor status
        sensor_attrs = {
            'raw_dev_state': state,
            'dev_state': map_envmon_states.get(state, (3, 'unknown[%s]' % state)),
        }

        try:
            sensor_attrs['reading'] = int(temp)
            if max_temp and int(max_temp):
                sensor_attrs['dev_levels'] = (int(max_temp), int(max_temp))
            else:
                sensor_attrs['dev_levels'] = None
        except:
            sensor_attrs['dev_state'] = (3, 'sensor defect')

        parsed[sensortype_id].setdefault(item, sensor_attrs)

    for sensor_type, sensors in entity_parsed.iteritems():
        for sensor_attrs in sensors.values():
            # Do not overwrite found sensors from perfstuff loop
            parsed.setdefault(sensor_type, {}).setdefault(sensor_attrs['descr'], sensor_attrs)

    return parsed


#   .--temperature---------------------------------------------------------.
#   |      _                                      _                        |
#   |     | |_ ___ _ __ ___  _ __   ___ _ __ __ _| |_ _   _ _ __ ___       |
#   |     | __/ _ \ '_ ` _ \| '_ \ / _ \ '__/ _` | __| | | | '__/ _ \      |
#   |     | ||  __/ | | | | | |_) |  __/ | | (_| | |_| |_| | | |  __/      |
#   |      \__\___|_| |_| |_| .__/ \___|_|  \__,_|\__|\__,_|_|  \___|      |
#   |                       |_|                                            |
#   +----------------------------------------------------------------------+
#   |                                                                      |
#   '----------------------------------------------------------------------'


def inventory_cisco_temperature(parsed):
    for item, value in parsed.get('8', {}).iteritems():
        if not value.get("obsolete", False):
            yield item, {}


def check_cisco_temperature(item, params, parsed):
    temp_parsed = parsed.get('8', {})
    if item in temp_parsed:
        data = temp_parsed[item]
        if data.get("obsolete", False):
            return 3, "This sensor is obsolete, please rediscover"

        state, state_readable = data['dev_state']
        return check_temperature(
            data['reading'],
            params,
            "cisco_temperature_%s" % item,
            dev_levels=data['dev_levels'],
            dev_status=state,
            dev_status_name=state_readable)


check_info['cisco_temperature'] = {
    "parse_function"     : parse_cisco_temperature,
    "inventory_function" : inventory_cisco_temperature,
    "check_function"     : check_cisco_temperature,
    "service_description": "Temperature %s",
    "group"              : "temperature",
    "has_perfdata"       : True,
    "snmp_scan_function" : lambda oid: "cisco" in oid(".1.3.6.1.2.1.1.1.0").lower() and \
                                    ( oid(".1.3.6.1.4.1.9.9.91.1.1.1.1.*") is not None or
                                      oid(".1.3.6.1.4.1.9.9.13.1.3.1.3.*") is not None ),
    "snmp_info"          : [
                               # cisco_temp_sensor data
                               ( ".1.3.6.1.2.1.47.1.1.1.1", [
                                 OID_END,
                                 CACHED_OID(2), # Description of the sensor
                               ]),

                               # Type and current state
                               ( ".1.3.6.1.4.1.9.9.91.1.1.1.1", [
                                 OID_END,
                                 1, # CISCO-ENTITY-SENSOR-MIB::entSensorType
                                 2, # CISCO-ENTITY-SENSOR-MIB::entSensorScale
                                 3, # CISCO-ENTITY-SENSOR-MIB::entSensorPrecision
                                 4, # CISCO-ENTITY-SENSOR-MIB::entSensorValue
                                 5, # CISCO-ENTITY-SENSOR-MIB::entSensorStatus
                               ]),

                               # Threshold
                               ( ".1.3.6.1.4.1.9.9.91.1.2.1.1", [
                                 OID_END,
                                 4, # Thresholds
                               ]),

                               # cisco_temp_perf data
                               ( ".1.3.6.1.4.1.9.9.13.1.3.1", [ # CISCO-SMI
                                 OID_END,
                                 2, # ciscoEnvMonTemperatureStatusDescr
                                 3, # ciscoEnvMonTemperatureStatusValue
                                 4, # ciscoEnvMonTemperatureThreshold
                                 6, # ciscoEnvMonTemperatureState
                               ]),
                            ],
    "includes"          : [ "temperature.include", 'cisco_sensor_item.include' ],
}

#.
#   .--dom-----------------------------------------------------------------.
#   |                            _                                         |
#   |                         __| | ___  _ __ ___                          |
#   |                        / _` |/ _ \| '_ ` _ \                         |
#   |                       | (_| | (_) | | | | | |                        |
#   |                        \__,_|\___/|_| |_| |_|                        |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   | digital optical monitoring                                           |
#   '----------------------------------------------------------------------'


def inventory_cisco_temperature_dom(parsed):
    parsed_dom = parsed.get('14', {})
    for item, attrs in parsed_dom.iteritems():
        if attrs.get('raw_dev_state') == '1':
            yield item, {}


def _determine_all_levels(dlh_upper, dlh_lower, user_levels, dev_levels):
    """
    Backend-specific generic determintation of levels dependent on the device
    handling configuration, the user and device levels. The returned levels
    are conform to the levels expected by the generic check_levels() function.

    dlh_upper/lower:
    - "no":         Sets user_levels to None.
    - "usr":        Uses user_levels, ignores dev_levels.
    - "dev":        Uses dev_levels, ignores usr_levels.
    - "devdefault": Uses device's upper/lower_levels if present,
    - "usrdefault": Uses user upper/lower_levels if present, otherwise device's_upper/lower_levels.
    usr_levels:     Tuple[warn_upper, crit_upper, warn_lower, crit_lower]
    dev_levels:     Tuple[warn_upper, crit_upper, warn_lower, crit_lower]

    In case the user_levels or dev_levels are prefered over the other choice
    dependent on the dlh selection ("usrdefault", "devdefault") but only upper or lower
    levels defined the overall levels are merged:

    E.g. with dlh "usrdefault", user_levels (None, None, -1.0, -2.0) and
    dev_levels (-1.3, 1.699, -7.3, -11.301) are merged into (-1.3, 1.699, -1.0, -2.0).

    Raises ValueError in case of unsupported value passed to dlh_upper/lower.
    """

    def _determine_levels(dlh, user_levels, dev_levels):
        """
        Same as _determine_all_levels() but for upper or lower levels only.

        dlh: Same as in _determine_all_levels() but for upper or lower levels only.
        user_levels: Tuple[warn, crit]
        device_levels: Tuple[warn, crit]
        """
        if dlh not in ("no", "usr", "dev", "usrdefault", "devdefault"):
            raise ValueError("Invalid value for dlh %s" % dlh)
        if not isinstance(user_levels, tuple):
            raise TypeError("Invalid type for user_levels %s" % type(user_levels))
        if len(user_levels) != 2:
            raise TypeError("user_levels supports 2-Tuple only but is %s" % type(user_levels))
        if not isinstance(dev_levels, tuple):
            raise TypeError("Invalid type for dev_levels %s" % type(dev_levels))
        if len(dev_levels) != 2:
            raise TypeError("user_levels supports 2-Tuple only but is %s" % type(dev_levels))
        if dlh == "usr":
            levels = user_levels
        elif dlh == "dev":
            levels = dev_levels
        else:
            if dev_levels is None:
                levels = (None, None)
            if dlh == "devdefault":
                levels = tuple(x if x is not None else y for x, y in zip(dev_levels, user_levels))
            elif dlh == "usrdefault":
                levels = tuple(y if y is not None else x for x, y in zip(dev_levels, user_levels))
            else:  # "no"
                levels = (None, None)
        return levels

    upper_levels = _determine_levels(dlh_upper, user_levels[0:2], dev_levels[0:2])
    lower_levels = _determine_levels(dlh_lower, user_levels[2:4], dev_levels[2:4])

    levels = upper_levels + lower_levels

    if levels == (None, None, None, None):
        levels = None  # for check_levels() compatibility, no checking
    return levels


def check_cisco_temperature_dom(item, params, parsed):
    # TODO perf, precision, severity, etc.

    def _get_device_level_handling_and_user_levels(levels):
        """
        Maps WATO UI specific levels into generically manageable information.

        levels: upper or lower user levels
         - False: set device handling indicator to "no checking", set user_levels to Tuple[None, None]
         - True: set device handling indicator to "use device levels", set user_levels to Tuple[None, None]
         - Tuple[warn, crit]: upper or lower user levels

        Returns: device level handling indicator and user levels as Tuple["no"/"dev"/"usr", 2-Tuple[]]

        Raises TypeError in case levels types are not valid.
        """
        if isinstance(levels, tuple) and len(levels) == 2 and all(
                isinstance(x, float) for x in levels):
            return "usr", levels
        elif levels is True:
            return "dev", (None, None)
        elif levels is False:
            return "no", (None, None)
        raise TypeError("levels does only accept Bool and 2-Tuple but is %s" % type(levels))

    data = parsed.get('14', {}).get(item, {})
    reading = data.get('reading')
    if reading is None:
        return

    # TODO: care about check status which is always OK
    state, state_readable = data['dev_state']
    yield state, 'Status: %s' % state_readable

    # Map WATO configuration of levels to check_levels() compatible tuple.
    # Default value in case of missing WATO config is use device levels.
    upper_levels = params.get("power_levels_upper", True)
    dlh_upper, user_levels_upper = _get_device_level_handling_and_user_levels(upper_levels)
    lower_levels = params.get("power_levels_lower", True)
    dlh_lower, user_levels_lower = _get_device_level_handling_and_user_levels(lower_levels)

    user_levels = user_levels_upper + user_levels_lower
    device_levels = data.get('dev_levels', (None, None, None, None))

    levels = _determine_all_levels(dlh_upper, dlh_lower, user_levels, device_levels)
    if "Transmit" in data["descr"]:
        dsname = "output_signal_power_dbm"
    elif "Receive" in data["descr"]:
        dsname = "input_signal_power_dbm"
    else:
        # in rare case of sensor id instead of sensor description no destinction
        # between transmit/receive possible
        dsname = "signal_power_dbm"
    yield check_levels(reading, dsname, levels, unit='dBm', infoname="Signal power")


check_info['cisco_temperature.dom'] = {
    "inventory_function": inventory_cisco_temperature_dom,
    "check_function": check_cisco_temperature_dom,
    "service_description": "DOM %s",
    "group": "cisco_dom",
    "has_perfdata": True,
    "includes": ['cisco_sensor_item.include'],
}
