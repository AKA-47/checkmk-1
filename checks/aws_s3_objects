#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_aws_s3_objects(info):
    try:
        return parse_aws(info)[-1]
    except IndexError:
        return {}


def inventory_aws_s3_objects(parsed):
    return [(bucket_name, {}) for bucket_name, metrics in parsed.iteritems() if metrics]


@get_parsed_item_data
def check_aws_s3_objects(item, params, metrics):
    sum_size = 0
    num_objects = 0
    largest = None
    largest_size = 0
    for row in metrics:
        size = row['Size']
        sum_size += row['Size']
        num_objects += 1
        if size >= largest_size:
            largest = row['Key']
            largest_size = size
    yield 0, 'Number of object: %s' % num_objects
    yield 0, 'Size: %s' % get_bytes_human_readable(sum_size)
    yield 0, 'Largest: %s, %s' % (largest, get_bytes_human_readable(largest_size))


check_info['aws_s3_objects'] = {
    'parse_function': parse_aws_s3_objects,
    'inventory_function': inventory_aws_s3_objects,
    'check_function': check_aws_s3_objects,
    'service_description': 'AWS/S3 Objects %s',
    'includes': ['aws.include'],
}
