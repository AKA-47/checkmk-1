#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

AWSELBHealthMap = {
    "InService": "in service",
    "OutOfService": "out of service",
    "Unknown": "unknown",
}


def parse_aws_elb_health(info):
    try:
        return parse_aws(info)[-1]
    except IndexError:
        return {}


def inventory_aws_elb_health(parsed):
    if parsed:
        return [(None, {})]


def check_aws_elb_health(item, params, parsed):
    state_readable = AWSELBHealthMap[parsed['State']]
    if state_readable == "in service":
        state = 0
    elif state_readable == "out of service":
        state = 1
    else:
        state = 3
    yield state, 'Status: %s' % state_readable
    yield 0, 'Instance: %s' % parsed['InstanceId']

    reason_code = parsed['ReasonCode']
    if reason_code not in [None, "", "N/A"]:
        yield 0, 'Reason: %s' % reason_code

    description = parsed['Description']
    if description not in [None, "", "N/A"]:
        yield 0, 'Description: %s' % description


check_info['aws_elb_health'] = {
    'parse_function': parse_aws_elb_health,
    'inventory_function': inventory_aws_elb_health,
    'check_function': check_aws_elb_health,
    'service_description': 'AWS/ELB Health ',
    'includes': ['aws.include'],
}
