#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_docker_container_status(info):
    '''process the first line to a JSON object

    In case there are multiple lines of output sent by the agent only process the first
    line. We assume that this a full JSON object. The rest of the section is skipped.
    When a container got piggyback data from multiple hosts (e.g. a cluster) this results
    in multiple JSON objects handed over to this check.
    '''
    version = docker_get_version(info)  # pylint: disable=undefined-variable

    index = 0 if version is None else 1
    parsed = docker_json_get_obj(info[index]) or {} if info[index:] else {}  # pylint: disable=undefined-variable

    if version is None:
        return DeprecatedDict(parsed)  # pylint: disable=undefined-variable
    return parsed


#.
#   .--Health--------------------------------------------------------------.
#   |                    _   _            _ _   _                          |
#   |                   | | | | ___  __ _| | |_| |__                       |
#   |                   | |_| |/ _ \/ _` | | __| '_ \                      |
#   |                   |  _  |  __/ (_| | | |_| | | |                     |
#   |                   |_| |_|\___|\__,_|_|\__|_| |_|                     |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   | Represents the containers internal status, as implemented within     |
#   | the container itself using Docker's HEALTHCHECK API                  |
#   '----------------------------------------------------------------------'


def inventory_docker_container_status_health(parsed):
    if "Health" in parsed:
        yield None, None


def check_docker_container_status_health(_no_item, _no_params, parsed):
    health_status = parsed.get("Health", {}).get("Status")

    if health_status == "healthy":
        return 0, "Healthy"
    elif health_status == "starting":
        return 1, "Starting"
    elif health_status == "unhealthy":
        failing_streak = parsed.get("Health", {}).get("FailingStreak", "not found")
        return 2, "Unhealthy - Failing Streak: %d" % failing_streak
    return 3, "Health Status '%s' unknown" % health_status


check_info["docker_container_status.health"] = {
    "inventory_function": inventory_docker_container_status_health,
    "check_function": check_docker_container_status_health,
    "service_description": "Docker container health",
    'includes': ['docker.include', 'legacy_docker.include'],
}

#.
#   .--Status - Main Check-------------------------------------------------.
#   |                    ____  _        _                                  |
#   |                   / ___|| |_ __ _| |_ _   _ ___                      |
#   |                   \___ \| __/ _` | __| | | / __|                     |
#   |                    ___) | || (_| | |_| |_| \__ \                     |
#   |                   |____/ \__\__,_|\__|\__,_|___/                     |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   | Represents the status of the docker container "from the outside"     |
#   '----------------------------------------------------------------------'


@append_deprecation_warning  # pylint: disable=undefined-variable
def check_docker_container_status(_no_item, _no_params, parsed):
    status = parsed.get("Status", "unknown")
    state = {"running": 0, "unknown": 3}.get(status, 2)

    yield state, "Status: %s" % status

    if parsed.get("Error"):
        yield 2, "Error: %s" % parsed["Error"]


check_info['docker_container_status'] = {
    'parse_function': parse_docker_container_status,
    'inventory_function': discover_single,
    'check_function': check_docker_container_status,
    'service_description': 'Docker container status',
    'includes': ['docker.include', 'legacy_docker.include'],
}
