#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

import time

from cmk.base.plugins.agent_based.utils import postgres

# <<<postgres_stats>>>
# [databases_start]
# postgres
# testdb
# datenbank
# [databases_end]
# datname;sname;tname;vtime;atime
# postgres;pg_catalog;pg_statistic;-1;-1
# postgres;pg_catalog;pg_type;-1;-1
# postgres;pg_catalog;pg_authid;-1;-1
# postgres;pg_catalog;pg_attribute;-1;-1


def discover_postgres_stats(section):
    for item in section:
        yield f"VACUUM {item}", {}
        yield f"ANALYZE {item}", {}


def _check_never_checked(text, never_checked, params, now):
    state_key = "last-time-all-checked"
    if not never_checked:
        set_item_state(state_key, now)
        yield 0, "No never checked tables"
        return

    count = len(never_checked)
    cutoff_hint = " (first 5 shown)" if count > 5 else ""
    yield 0, f"{count} tables were never {text}: {' / '.join(never_checked[:5])}{cutoff_hint}"

    last_ts = get_item_state(state_key)
    if last_ts is None:
        set_item_state(state_key, now)
        return
    yield check_levels(
        now - last_ts,
        None,
        params.get("never_analyze_vacuum"),
        human_readable_func=get_age_human_readable,
        infoname=f"Never {text} tables for",
    )


def check_postgres_stats(item, params, section):
    yield from _check_postgres_stats(
        item=item,
        params=params,
        section=section,
        now=time.time(),
    )


def _check_postgres_stats(*, item, params, section, now):
    item_type, database = item.split(" ", 1)
    data = section.get(database)

    if data is None:
        # In case of missing information we assume that the login into
        # the database has failed and we simply skip this check. It won't
        # switch to UNKNOWN, but will get stale.
        raise MKCounterWrapped("Login into database failed")

    stats_field = f"{item_type[0].lower()}time"
    text = f"{item_type.lower().strip('e')}ed"

    times_and_names = [(int(table[stats_field]) if table[stats_field] else -1, table["tname"])
                       for table in data
                       if table["sname"] != "pg_catalog"]
    oldest_element = min(((t, n) for t, n in times_and_names if t != -1), default=None)
    never_checked = [n for t, n in times_and_names if t == -1]

    if oldest_element:
        oldest_time, oldest_name = oldest_element
        yield 0, f"Table: {oldest_name}"
        yield check_levels(
            now - oldest_time,
            None,
            params.get(f"last_{item_type.lower()}"),
            human_readable_func=get_age_human_readable,
            infoname=f"Not {text} for",
        )

    yield from _check_never_checked(text, never_checked, params, now)


check_info['postgres_stats'] = {
    "parse_function": postgres.parse_dbs,
    "service_description": "PostgreSQL %s",
    "inventory_function": discover_postgres_stats,
    "check_function": check_postgres_stats,
    "group": "postgres_maintenance",
    "default_levels_variable": "postgres_stats_default_levels",
}

factory_settings["postgres_stats_default_levels"] = {
    "never_analyze_vacuum": (0, 1000 * 365 * 24 * 3600),
}
