#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.plugins.agent_based.utils.cmciii import get_item, get_sensor
# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.temperature import *  # pylint: disable=wildcard-import,unused-wildcard-import

# In order to stay compatible we have to build the items
# this complicated way :(

discovery_cmciii = []


def discovery_params():
    return host_extra_conf_merged(host_name(), discovery_cmciii)


def discover_cmciii_sensors(type_, parsed):
    params = discovery_params()
    for id_, entry in parsed[type_].items():
        yield get_item(id_, params, entry), {'_item_key': id_}


#   .--state---------------------------------------------------------------.
#   |                            _        _                                |
#   |                        ___| |_ __ _| |_ ___                          |
#   |                       / __| __/ _` | __/ _ \                         |
#   |                       \__ \ || (_| | ||  __/                         |
#   |                       |___/\__\__,_|\__\___|                         |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |                             main check                               |
#   '----------------------------------------------------------------------'


def inventory_cmciii_state(parsed):
    for entry in parsed["state"]:
        yield entry, None


def check_cmciii_state(item, params, parsed):
    entry = parsed["state"].get(item)
    if not entry:
        return

    map_states = {
        '1': (3, "not available"),
        '2': (0, "OK"),
        '3': (1, "detect"),
        '4': (2, "lost"),
        '5': (1, "changed"),
        '6': (2, "error"),
    }

    state, state_readable = map_states[entry["status"]]
    return state, "Status: %s" % state_readable


check_info['cmciii'] = {
    # section is already migrated
    "inventory_function": inventory_cmciii_state,
    "check_function": check_cmciii_state,
    "service_description": "State %s",
}

#.}
#   .--PSM current---------------------------------------------------------.
#   |       ____  ____  __  __                                  _          |
#   |      |  _ \/ ___||  \/  |   ___ _   _ _ __ _ __ ___ _ __ | |_        |
#   |      | |_) \___ \| |\/| |  / __| | | | '__| '__/ _ \ '_ \| __|       |
#   |      |  __/ ___) | |  | | | (__| |_| | |  | | |  __/ | | | |_        |
#   |      |_|   |____/|_|  |_|  \___|\__,_|_|  |_|  \___|_| |_|\__|       |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def check_cmciii_psm_current(item, params, parsed):
    entry = get_sensor(item, params, parsed["psm_current"])
    if not entry:
        return

    current = entry["Value"]
    min_current = entry["SetPtHighAlarm"]
    max_current = entry["SetPtLowAlarm"]

    state = 0 if entry["Status"] == "OK" else 2
    return state, "Current: %s (%s/%s), Type: %s, Serial: %s, Position: %s" % \
        (current, min_current, max_current, entry["Unit Type"],
            entry["Serial Number"], entry["Mounting Position"]), \
        [("current", current, 0, 0, min_current, max_current)]


check_info['cmciii.psm_current'] = {
    "inventory_function": lambda parsed: discover_cmciii_sensors("psm_current", parsed),
    "check_function": check_cmciii_psm_current,
    "service_description": "Current %s",
    "has_perfdata": True,
}

#.
#   .--PSM plugs-----------------------------------------------------------.
#   |            ____  ____  __  __         _                              |
#   |           |  _ \/ ___||  \/  |  _ __ | |_   _  __ _ ___              |
#   |           | |_) \___ \| |\/| | | '_ \| | | | |/ _` / __|             |
#   |           |  __/ ___) | |  | | | |_) | | |_| | (_| \__ \             |
#   |           |_|   |____/|_|  |_| | .__/|_|\__,_|\__, |___/             |
#   |                                |_|            |___/                  |
#   '----------------------------------------------------------------------'


def check_cmciii_psm_plugs(item, params, parsed):
    entry = get_sensor(item, params, parsed["psm_plugs"])
    if not entry:
        return

    state_readable = entry["Status"]
    state = 0 if state_readable == "OK" else 0
    return state, "Status: %s" % state_readable


check_info['cmciii.psm_plugs'] = {
    "inventory_function": lambda parsed: discover_cmciii_sensors("psm_plugs", parsed),
    "check_function": check_cmciii_psm_plugs,
    "service_description": "%s",
}
