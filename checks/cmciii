#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.elphase import *  # pylint: disable=wildcard-import,unused-wildcard-import
# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.humidity import *  # pylint: disable=wildcard-import,unused-wildcard-import
# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.temperature import *  # pylint: disable=wildcard-import,unused-wildcard-import

# In order to stay compatible we have to build the items
# this complicated way :(

discovery_cmciii = []


def sanitize_variable(variable):
    variable_splitted = variable.split(".")
    start, end = variable_splitted[:-1], variable_splitted[-1]
    start += max(0, 2 - len(start)) * ['']  # ensures that the sensor type can always be parsed
    return start + [end]


def sensor_type(variable):
    if variable[0].startswith("PSM_") and "Unit" in variable:
        return "psm_current"
    if variable[0].startswith("PSM_") and variable[1].startswith("Plug"):
        return "psm_plugs"
    if variable[0].startswith("Input") or variable[0].startswith("Output"):
        return "io"
    if "Access" in variable:
        return "access"
    if "Humidity" in variable:
        return "humidity"
    if variable[0] == "Air" and variable[1] == "Temperature":
        return "temp_in_out"
    if ("Temperature" in variable or "Dew Point" in variable or
            variable[1].endswith("Temperature")):
        return "temp"
    if "Leakage" in variable:
        return "leakage"
    if variable[1].startswith("CAN") and variable[1].endswith("Current"):
        return "can_current"
    if variable[0].startswith("Phase") or variable[1].startswith("Phase"):
        return "phase"
    if (variable[0].startswith('Battery') or variable[0].startswith('Detector') or
            variable[0].startswith('Door') or variable[0].startswith('External') or
            variable[0].startswith('Extinguishing') or variable[0].startswith('Mains') or
            variable[0].startswith('Maintenance') or variable[0].startswith('Manual') or
            variable[0] in ('Air flow', 'Communication', 'Fire', 'Ignition', 'Pre-Alarm')):
        return "status"
    return None


def sensor_id(sensor_type, variable, device):
    if sensor_type in ["temp", "temp_in_out"]:
        item = variable[0].replace("Temperature", "")
        if item == "":
            item = "Ambient"
        item += " %s" % device.replace("Liquid_Cooling_Package", "LCP")
        if variable[-1].startswith("In-") or variable[-1].startswith("Out-"):
            item += " %s" % variable[-1].split("-")[0]
        return item
    if sensor_type == "phase":
        if "Phase" in variable[0]:
            return "%s %s %s" % (
                device,
                "Phase",
                variable[0].replace("Phase", "").replace("L", "").strip(),
            )
        return "%s %s %s %s" % (
            device,
            variable[0],
            "Phase",
            variable[1].replace("Phase", "").replace("L", "").strip(),
        )
    if sensor_type in ["psm_plugs", "can_current"]:
        return "%s %s" % (device, ".".join(variable))
    return "%s %s" % (device, variable[0])


def sensor_key(sensor_type, var_type, variable):
    if sensor_type != "phase":
        return variable[-1]

    key_part = variable[1:-1] if "Phase" in variable[0] else variable[2:-1]

    if var_type != "2":
        return " ".join(key_part)

    key = "_".join(key_part).lower()
    if key == "power_apparent":
        key = "appower"
    elif key.endswith("_active"):
        key = key.replace("_active", "")
    return key


def sensor_value(value_str, value_int, scale, var_type, var_unit):
    if var_type in ["1", "7", "15", "20", "21", "90", "92", "93"]:
        return value_str

    # neg. scale: "-X" => "/ X"
    # pos. scale: "X"  => "* X"
    # else:            => "* 1"
    value = int(value_int)
    if scale:
        if (int_scale := int(scale)) < 0:
            value = float(value_int) * (-1.0 / float(scale))
        elif int_scale > 0:
            value = float(value_int) * float(scale)

    if var_unit == "kW" or var_unit == "KWh" or var_unit == "kVA":
        value *= 1000  # Convert from kW, kWh, kVA to W, Wh, VA
    return value


def parse_devices_and_states(device_table):
    devices, states = {}, {}
    for num, (endoid, name, alias, status) in enumerate(device_table, start=1):
        # no blanks in names since we use blanks in items
        # later to split between unit_name and item_name
        dev_name = alias.replace(" ", "_")
        if not dev_name:
            dev_name = name + "-" + str(num)

        if dev_name in states:
            dev_name = "%s %s" % (alias, endoid)

        devices.setdefault(endoid, dev_name)

        if dev_name in states and states[dev_name]["_location_"] != endoid:
            dev_name += " %s" % endoid

        states.setdefault(dev_name, {"status": status, "_location_": endoid})
    return devices, states


def split_temp_in_out_sensors(sensors):
    # the manual page of cmciii_temp_in_out explains why the sensors are split
    in_out_sensors = {}
    in_out_values = {'In-Bot', 'In-Mid', 'In-Top', 'Out-Bot', 'Out-Mid', 'Out-Top'}
    for item, sensor in sensors.items():
        template = {k: v for k, v in sensor.items() if k not in in_out_values}
        for value in in_out_values:
            in_out_item = "%s %s" % (
                item,
                value.replace('-', ' ').replace('Bot', 'Bottom').replace('Mid', 'Middle'),
            )
            in_out_sensors[in_out_item] = template.copy()
            in_out_sensors[in_out_item]['Value'] = sensor[value]
    return in_out_sensors


def parse_cmciii(info):
    device_table, var_table = info
    devices, states = parse_devices_and_states(device_table)

    parsed = {
        "state": states,
        "psm_current": {},
        "psm_plugs": {},
        "io": {},
        "access": {},
        "temp": {},
        "temp_in_out": {},
        "can_current": {},
        "humidity": {},
        "phase": {},
        "leakage": {},
        "status": {},
    }

    for oidend, variable, var_type, var_unit, scale, value_str, value_int in var_table:
        location, _index = oidend.split(".")
        sanitized_variable = sanitize_variable(variable)

        type_ = sensor_type(sanitized_variable)
        if type_ is None:
            continue

        device = devices.get(location)
        id_ = sensor_id(type_, sanitized_variable[:-1], device)
        if id_ in parsed[type_] and parsed[type_][id_]["_location_"] != location:
            id_ += " %s" % location
        parsed[type_].setdefault(id_, {"_device_": device, "_location_": location})

        key = sensor_key(type_, var_type, sanitized_variable)
        value = sensor_value(value_str, value_int, scale, var_type, var_unit)
        parsed[type_][id_].setdefault(key, value)

    parsed['temp_in_out'] = split_temp_in_out_sensors(parsed.pop('temp_in_out'))

    return parsed


def discovery_params():
    return host_extra_conf_merged(host_name(), discovery_cmciii)


def get_item(id_, params, sensor):
    if params.get('use_sensor_description', False) and (description := sensor.get('DescName')):
        return description
    return id_


def get_sensor(item, params, sensors):
    # This function is used for compatibility whith discovered services that do
    # not use _item_key in the params (yet).
    if params and (params_key := params.get('_item_key')):
        return sensors.get(params_key)
    return sensors.get(item)


def discover_cmciii_sensors(type_, parsed):
    params = discovery_params()
    for id_, entry in parsed[type_].items():
        yield get_item(id_, params, entry), {'_item_key': id_}


#   .--state---------------------------------------------------------------.
#   |                            _        _                                |
#   |                        ___| |_ __ _| |_ ___                          |
#   |                       / __| __/ _` | __/ _ \                         |
#   |                       \__ \ || (_| | ||  __/                         |
#   |                       |___/\__\__,_|\__\___|                         |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |                             main check                               |
#   '----------------------------------------------------------------------'


def inventory_cmciii_state(parsed):
    for entry in parsed["state"]:
        yield entry, None


def check_cmciii_state(item, params, parsed):
    entry = parsed["state"].get(item)
    if not entry:
        return

    map_states = {
        '1': (3, "not available"),
        '2': (0, "OK"),
        '3': (1, "detect"),
        '4': (2, "lost"),
        '5': (1, "changed"),
        '6': (2, "error"),
    }

    state, state_readable = map_states[entry["status"]]
    return state, "Status: %s" % state_readable


check_info['cmciii'] = {
    "parse_function": parse_cmciii,
    "inventory_function": inventory_cmciii_state,
    "check_function": check_cmciii_state,
    "service_description": "State %s",
    "snmp_scan_function": lambda oid: ".1.3.6.1.4.1.2606.7" in oid(".1.3.6.1.2.1.1.2.0"),
    "snmp_info": [
        (
            ".1.3.6.1.4.1.2606.7.4.1.2.1",
            [
                OID_END,
                "2",  # RITTAL-CMC-III-MIB::cmcIIIDevName
                "3",  # RITTAL-CMC-III-MIB::cmcIIIDevAlias
                "6",  # RITTAL-CMC-III-MIB::cmcIIIDevStatus
            ]),
        (
            ".1.3.6.1.4.1.2606.7.4.2.2.1",
            [
                OID_END,
                "3",  # RITTAL-CMC-III-MIB::cmcIIIVarName
                "4",  # RITTAL-CMC-III-MIB::cmcIIIVarType
                "5",  # RITTAL-CMC-III-MIB::cmcIIIVarUnit
                "7",  # RITTAL-CMC-III-MIB::cmcIIIVarScale
                "10",  # RITTAL-CMC-III-MIB::cmcIIIVarValueStr
                "11",  # RITTAL-CMC-III-MIB::cmcIIIVarValueInt
            ])
    ],
}

#.}
#   .--PSM current---------------------------------------------------------.
#   |       ____  ____  __  __                                  _          |
#   |      |  _ \/ ___||  \/  |   ___ _   _ _ __ _ __ ___ _ __ | |_        |
#   |      | |_) \___ \| |\/| |  / __| | | | '__| '__/ _ \ '_ \| __|       |
#   |      |  __/ ___) | |  | | | (__| |_| | |  | | |  __/ | | | |_        |
#   |      |_|   |____/|_|  |_|  \___|\__,_|_|  |_|  \___|_| |_|\__|       |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def check_cmciii_psm_current(item, params, parsed):
    entry = get_sensor(item, params, parsed["psm_current"])
    if not entry:
        return

    current = entry["Value"]
    min_current = entry["SetPtHighAlarm"]
    max_current = entry["SetPtLowAlarm"]

    state = 0 if entry["Status"] == "OK" else 2
    return state, "Current: %s (%s/%s), Type: %s, Serial: %s, Position: %s" % \
        (current, min_current, max_current, entry["Unit Type"],
            entry["Serial Number"], entry["Mounting Position"]), \
        [("current", current, 0, 0, min_current, max_current)]


check_info['cmciii.psm_current'] = {
    "inventory_function": lambda parsed: discover_cmciii_sensors("psm_current", parsed),
    "check_function": check_cmciii_psm_current,
    "service_description": "Current %s",
    "has_perfdata": True,
}

#.
#   .--PSM plugs-----------------------------------------------------------.
#   |            ____  ____  __  __         _                              |
#   |           |  _ \/ ___||  \/  |  _ __ | |_   _  __ _ ___              |
#   |           | |_) \___ \| |\/| | | '_ \| | | | |/ _` / __|             |
#   |           |  __/ ___) | |  | | | |_) | | |_| | (_| \__ \             |
#   |           |_|   |____/|_|  |_| | .__/|_|\__,_|\__, |___/             |
#   |                                |_|            |___/                  |
#   '----------------------------------------------------------------------'


def check_cmciii_psm_plugs(item, params, parsed):
    entry = get_sensor(item, params, parsed["psm_plugs"])
    if not entry:
        return

    state_readable = entry["Status"]
    state = 0 if state_readable == "OK" else 0
    return state, "Status: %s" % state_readable


check_info['cmciii.psm_plugs'] = {
    "inventory_function": lambda parsed: discover_cmciii_sensors("psm_plugs", parsed),
    "check_function": check_cmciii_psm_plugs,
    "service_description": "%s",
}

#.
#   .--IO------------------------------------------------------------------.
#   |                              ___ ___                                 |
#   |                             |_ _/ _ \                                |
#   |                              | | | | |                               |
#   |                              | | |_| |                               |
#   |                             |___\___/                                |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def check_cmciii_io(item, params, parsed):
    entry = get_sensor(item, params, parsed["io"])
    if not entry:
        return

    state_readable = entry["Status"]

    infotext = "Status: %s" % state_readable
    for key in ["Logic", "Delay", "Relay"]:
        if key in entry:
            infotext += ", %s: %s" % (key, entry[key])

    if state_readable in ["Open", "Closed"]:
        # Some door sensors have been mapped to Input instead of Access
        # by the vendor
        return {"Open": 1, "Closed": 0}[state_readable], infotext

    if "Relay" in entry:
        if state_readable == "OK":
            return 0, infotext
        return 2, infotext

    if state_readable in ["OK", "Off"]:
        return 0, infotext

    if state_readable == "On":
        return 1, infotext

    return 2, infotext


check_info['cmciii.io'] = {
    "inventory_function": lambda parsed: discover_cmciii_sensors("io", parsed),
    "check_function": check_cmciii_io,
    "service_description": "%s",
}

#.
#   .--access--------------------------------------------------------------.
#   |                                                                      |
#   |                      __ _  ___ ___ ___  ___ ___                      |
#   |                     / _` |/ __/ __/ _ \/ __/ __|                     |
#   |                    | (_| | (_| (_|  __/\__ \__ \                     |
#   |                     \__,_|\___\___\___||___/___/                     |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def check_cmciii_access(item, params, parsed):
    entry = get_sensor(item, params, parsed["access"])
    if not entry:
        return

    state_readable = entry["Status"]
    if state_readable == "Closed":
        state = 0
    elif state_readable == "Open":
        state = 1
    else:
        state = 2

    return state, "%s: %s, Delay: %s, Sensitivity: %s" % (
        entry["DescName"],
        state_readable,
        entry["Delay"],
        entry["Sensitivity"],
    )


check_info['cmciii.access'] = {
    "inventory_function": lambda parsed: discover_cmciii_sensors("access", parsed),
    "check_function": check_cmciii_access,
    "service_description": "%s",
}

#.
#   .--temperature---------------------------------------------------------.
#   |      _                                      _                        |
#   |     | |_ ___ _ __ ___  _ __   ___ _ __ __ _| |_ _   _ _ __ ___       |
#   |     | __/ _ \ '_ ` _ \| '_ \ / _ \ '__/ _` | __| | | | '__/ _ \      |
#   |     | ||  __/ | | | | | |_) |  __/ | | (_| | |_| |_| | | |  __/      |
#   |      \__\___|_| |_| |_| .__/ \___|_|  \__,_|\__|\__,_|_|  \___|      |
#   |                       |_|                                            |
#   '----------------------------------------------------------------------'


def inventory_cmciii_temp(parsed):
    params = discovery_params()
    for id_, entry in parsed["temp"].items():
        # TODO: Should we not handle the dew points somewhere else?
        # In any case, the "Setup" entries contain setpoints and
        # cannot report a temperature to the user.
        if "Value" in entry:
            yield get_item(id_, params, entry), {'_item_key': id_}


def check_cmciii_temp(item, params, parsed):
    # Fields from table 8.3.2 Temperature in "Assembly and operating instructions"
    # for software version V3.07.03.
    entry = get_sensor(item, params, parsed["temp"])
    if not entry:
        return

    state, infotext, perfdata = check_temperature(
        entry["Value"],
        params,
        "cmciii.temp.%s" % item,
        dev_levels=(entry.get("SetPtHighWarning"), entry.get("SetPtHighAlarm")),
        dev_levels_lower=(entry.get("SetPtLowWarning"), entry.get("SetPtLowAlarm")),
        dev_status_name=entry.get("Status"),
    )

    descr = entry.get("DescName", "").replace("Temperature", "")
    if descr and descr not in item:
        infotext = "[%s] %s" % (descr, infotext)
    return state, infotext, perfdata


check_info['cmciii.temp'] = {
    "inventory_function": inventory_cmciii_temp,
    "check_function": check_cmciii_temp,
    "service_description": "Temperature %s",
    "has_perfdata": True,
    "group": "temperature",
}

#.
#   .--temp. in/out--------------------------------------------------------.
#   |        _                          _          __          _           |
#   |       | |_ ___ _ __ ___  _ __    (_)_ __    / /__  _   _| |_         |
#   |       | __/ _ \ '_ ` _ \| '_ \   | | '_ \  / / _ \| | | | __|        |
#   |       | ||  __/ | | | | | |_) |  | | | | |/ / (_) | |_| | |_         |
#   |        \__\___|_| |_| |_| .__(_) |_|_| |_/_/ \___/ \__,_|\__|        |
#   |                         |_|                                          |
#   '----------------------------------------------------------------------'


def check_cmciii_temp_in_out(item, params, parsed):
    entry = get_sensor(item, params, parsed["temp_in_out"])
    if not entry:
        return
    return check_temperature(entry["Value"], params, "cmciii.temp_in_out.%s" % item)


check_info['cmciii.temp_in_out'] = {
    "inventory_function": lambda parsed: discover_cmciii_sensors("temp_in_out", parsed),
    "check_function": check_cmciii_temp_in_out,
    "service_description": "Temperature %s",
    "has_perfdata": True,
    "group": "temperature",
}

#.
#   .--CAN current---------------------------------------------------------.
#   |       ____    _    _   _                                  _          |
#   |      / ___|  / \  | \ | |   ___ _   _ _ __ _ __ ___ _ __ | |_        |
#   |     | |     / _ \ |  \| |  / __| | | | '__| '__/ _ \ '_ \| __|       |
#   |     | |___ / ___ \| |\  | | (__| |_| | |  | | |  __/ | | | |_        |
#   |      \____/_/   \_\_| \_|  \___|\__,_|_|  |_|  \___|_| |_|\__|       |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def check_cmciii_can_current(item, params, parsed):
    entry = get_sensor(item, params, parsed["can_current"])
    if not entry:
        return

    state_readable = entry["Status"]
    value = entry["Value"]
    warn = entry["SetPtHighWarning"]
    crit = entry["SetPtHighAlarm"]

    state = 0 if state_readable == "OK" else 2
    return state, "Status: %s, Current: %s mA (warn/crit at %s/%s mA)" % \
        (state_readable, value, warn, crit), \
        [("current", value / 1000.0, warn, crit)]


check_info['cmciii.can_current'] = {
    "inventory_function": lambda parsed: discover_cmciii_sensors("can_current", parsed),
    "check_function": check_cmciii_can_current,
    "service_description": "%s",
    "has_perfdata": True,
}

#.
#   .--humidity------------------------------------------------------------.
#   |              _                     _     _ _ _                       |
#   |             | |__  _   _ _ __ ___ (_) __| (_) |_ _   _               |
#   |             | '_ \| | | | '_ ` _ \| |/ _` | | __| | | |              |
#   |             | | | | |_| | | | | | | | (_| | | |_| |_| |              |
#   |             |_| |_|\__,_|_| |_| |_|_|\__,_|_|\__|\__, |              |
#   |                                                  |___/               |
#   '----------------------------------------------------------------------'


def check_cmciii_humidity(item, params, parsed):
    entry = get_sensor(item, params, parsed["humidity"])
    if not entry:
        return

    state_readable = entry["Status"]
    state = 0 if state_readable == "OK" else 2
    yield state, "Status: %s" % state_readable
    yield check_humidity(entry["Value"], params)


check_info['cmciii.humidity'] = {
    "inventory_function": lambda parsed: discover_cmciii_sensors("humidity", parsed),
    "check_function": check_cmciii_humidity,
    "service_description": "%s",
    "has_perfdata": True,
    "group": "humidity",
}

#.
#   .--phase---------------------------------------------------------------.
#   |                           _                                          |
#   |                     _ __ | |__   __ _ ___  ___                       |
#   |                    | '_ \| '_ \ / _` / __|/ _ \                      |
#   |                    | |_) | | | | (_| \__ \  __/                      |
#   |                    | .__/|_| |_|\__,_|___/\___|                      |
#   |                    |_|                                               |
#   '----------------------------------------------------------------------'


def check_cmciii_phase(item, params, parsed):
    return check_elphase(item, params, {item: get_sensor(item, params, parsed["phase"])})


check_info['cmciii.phase'] = {
    "inventory_function": lambda parsed: discover_cmciii_sensors("phase", parsed),
    "check_function": check_cmciii_phase,
    "service_description": "Input %s",
    "has_perfdata": True,
    "group": "el_inphase",
}

#   .--leakage-------------------------------------------------------------.
#   |                  _            _                                      |
#   |                 | | ___  __ _| | ____ _  __ _  ___                   |
#   |                 | |/ _ \/ _` | |/ / _` |/ _` |/ _ \                  |
#   |                 | |  __/ (_| |   < (_| | (_| |  __/                  |
#   |                 |_|\___|\__,_|_|\_\__,_|\__, |\___|                  |
#   |                                         |___/                        |
#   +----------------------------------------------------------------------+


def check_cmciii_leakage(item, params, parsed):
    entry = get_sensor(item, params, parsed["leakage"])
    if not entry:
        return

    # We do not take entry["Position"] into account. It detects leaks but does
    # not account for the delay. The delay is the time after which the status
    # message changes.
    # The leakage status is a readable text for notAvail(1), ok(4), alarm(5),
    # probeOpen(24). All numeric values are defined in cmcIIIMsgStatus.
    status = entry["Status"]
    yield 2 if status != "OK" else 0, "Status: %s" % status
    yield 0, "Delay: %s" % entry["Delay"]


check_info['cmciii.leakage'] = {
    "inventory_function": lambda parsed: discover_cmciii_sensors("leakage", parsed),
    "check_function": check_cmciii_leakage,
    "service_description": "%s",
}

#   .--status--------------------------------------------------------------.
#   |                         _        _                                   |
#   |                     ___| |_ __ _| |_ _   _ ___                       |
#   |                    / __| __/ _` | __| | | / __|                      |
#   |                    \__ \ || (_| | |_| |_| \__ \                      |
#   |                    |___/\__\__,_|\__|\__,_|___/                      |
#   |                                                                      |
#   +----------------------------------------------------------------------+


def check_cmciii_status(item, params, parsed):
    entry = get_sensor(item, params, parsed["status"])
    if not entry:
        return

    status = entry["Status"]
    yield 2 if status != "OK" else 0, "Status: %s" % status


check_info['cmciii.status'] = {
    "inventory_function": lambda parsed: discover_cmciii_sensors("status", parsed),
    "check_function": check_cmciii_status,
    "service_description": "%s",
}
