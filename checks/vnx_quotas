#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.
from typing import Any, Dict, List, Mapping, NamedTuple, Optional, Sequence, Tuple

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.df import *  # pylint: disable=wildcard-import,unused-wildcard-import
# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.size_trend import *  # pylint: disable=wildcard-import,unused-wildcard-import

discovery_rules_vnx_quotas = []

_MEGA = 1024.0**2


class Quota(NamedTuple):
    name: str
    fs: str
    limit: str
    used: int


class Section(NamedTuple):
    fs_sizes: Dict[str, int]
    quotas: List[Quota]


def parse_vnx_quotas(info) -> Section:
    """
        >>> from pprint import pprint as pp
        >>> pp(parse_vnx_quotas([
        ...     ['[[[fs]]]'],
        ...     ['fv51_01', '806636,806636,0,0,825996248'],
        ...     ['fv51_02', '100774,100773,0,0,103193048'],
        ...     ['[[[quotas]]]'],
        ...     ['vdmfv51', 'fv51_01', '/hmtest', '0', '0'],
        ...     ['vdmfv51', 'fv51_01', '/BOEINT', '0', '1048576'],
        ... ]))
        {'fs_total_bytes': {'fv51_01': 825996248',
                            fv51_02': 103193048}},
        'quotas': {'vdmfv51 /hmtest': {'fs': 'fv51_01', 'limit': '0', 'used': 0},
                   'vdmfv51 /BOEINT': {'fs': 'fv51_01', 'limit': '1048576', 'used': 0}}
    """

    section = Section(fs_sizes={}, quotas=[])
    subsection = None
    for line in info:
        if line[0].startswith("[[[") and line[0].endswith("]]]"):
            subsection = line[0][3:-3]
            continue

        if subsection == "fs":
            fs_name = line[0].strip()
            fs_total_bytes = int(line[1].split(',')[4]) * 1024
            section.fs_sizes[fs_name] = fs_total_bytes

        elif subsection == "quotas":
            if len(line) != 5:
                continue

            dms, fs, mp, used_str, limit_str = line
            name = "%s %s" % (dms.strip(), mp.strip())
            section.quotas.append(
                Quota(
                    name=name,
                    fs=fs.strip(),
                    limit=limit_str,
                    used=int(used_str) * 1024,
                ))

    return section


def vnx_quotas_renaming(name: str, mappings: Sequence[Tuple[str, str]]) -> str:
    for match, substitution in mappings:
        if match.startswith("~"):
            num_perc_s = substitution.count("%s")
            reg = regex(match[1:])
            matchobj = reg.match(name)
            if matchobj:
                matches = [g and g or "" for g in matchobj.groups()]
                for num, group in enumerate(matches, start=1):
                    substitution = substitution.replace("%%%d" % num, group)
                substitution = substitution % tuple(matches[:num_perc_s])
                return substitution

        elif name == match:
            return substitution

    return name


def discover_vnx_quotas(parsed):
    params = host_extra_conf(host_name(), discovery_rules_vnx_quotas)

    for quota in parsed.quotas:
        dms, mpt = quota.name.split(" ")
        if params and params[0]:
            dms = vnx_quotas_renaming(dms, params[0]["dms_names"])
            mpt = vnx_quotas_renaming(mpt, params[0]["mp_names"])
        yield "%s %s" % (dms, mpt), {"pattern": quota.name}


def _get_quota(item: str, params: Mapping[str, Any], section: Section) -> Optional[Quota]:
    for quota in section.quotas:
        if quota.name in (item, params["pattern"]):
            return quota
    return None


def check_vnx_quotas(item: str, params: Mapping[str, Any], parsed: Section):
    quota = _get_quota(item, params, parsed)
    if quota is None:
        return

    # Special case as customer said:
    # if BlockHardLimit == "0" or "NoLimit" then we take filesystem size
    use_fs = quota.limit in ("0", "NoLimit") and quota.fs in parsed.fs_sizes
    size_mb = parsed.fs_sizes[quota.fs] / _MEGA if use_fs else int(quota.limit) / 1024.0
    available_mb = size_mb - quota.used / _MEGA

    state, infotext, perfdata = df_check_filesystem_single(
        item,
        size_mb,
        available_mb,
        0.0,
        None,
        None,
        params,
    )

    yield state, infotext.replace("filesystem", "quota"), perfdata


check_info['vnx_quotas'] = {
    'parse_function': parse_vnx_quotas,
    'inventory_function': discover_vnx_quotas,
    'check_function': check_vnx_quotas,
    'service_description': 'VNX Quota %s',
    'has_perfdata': True,
    'group': "filesystem",
    'default_levels_variable': 'filesystem_default_levels',
}
