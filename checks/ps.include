#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.
import time

from cmk.base.plugins.agent_based.utils.ps import (
    ps_info,
    format_process_list,
    ps_cleanup_params,
    process_capture as check_ps_process_capture,
)
from cmk.base.plugins.agent_based.ps_check import discover_ps

GRAB_USER = False

factory_settings["ps_default_levels"] = {
    "levels": (1, 1, 99999, 99999),
}


def inventory_ps_common(params, parsed):
    inventory = []
    for service in discover_ps(params, (1, parsed)):
        inv = (service.item, service.parameters)
        if inv not in inventory:
            inventory.append(inv)
    return inventory


def check_ps_common(item, params, parsed, cpu_cores=1, info_name="Processes", total_ram=None):
    params = ps_cleanup_params(params)

    processes = check_ps_process_capture(parsed, params, cpu_cores)

    yield ps_count_check(processes, params, info_name)

    for memory_state in memory_check(processes, params):
        yield memory_state

    if processes.resident_size and "resident_levels_perc" in params:
        yield memory_perc_check(processes, params, total_ram)

    # CPU
    if processes.count:
        yield cpu_check(processes.percent_cpu, item, params)

    if "single_cpulevels" in params:
        for ps_state in individual_process_check(processes, params):
            yield ps_state

    # only check handle_count if provided by wmic counters
    if processes.handle_count:
        yield handle_count_check(processes, params)

    if processes.min_elapsed is not None:
        yield from uptime_check(processes, params)

    if params.get("process_info", None):
        infotext = "\n" + format_process_list(processes, params["process_info"] == "html")
        yield 0, infotext


def ps_count_check(processes, params, info_name):
    warnmin, okmin, okmax, warnmax = params["levels"]

    state, infotext, perfdata = check_levels(processes.count,
                                             "count", (okmax + 1, warnmax + 1, okmin, warnmin),
                                             human_readable_func=int,
                                             boundaries=(0, None),
                                             infoname=info_name)

    if processes.running_on_nodes:
        infotext += " [running on %s]" % ", ".join(sorted(processes.running_on_nodes))

    return state, infotext, perfdata


def memory_check(processes, params):
    """Check levels for virtual and physical used memory"""
    for size, title, levels, metric in [
        (processes.virtual_size, "virtual", "virtual_levels", "vsz"),
        (processes.resident_size, "physical", "resident_levels", "rss"),
    ]:
        if size == 0:
            continue

        warn_levels, crit_levels = params.get(levels, (None, None))
        status, info_text, perf_data = check_levels(size * 1024,
                                                    None, (warn_levels, crit_levels),
                                                    human_readable_func=get_bytes_human_readable,
                                                    infoname=title)
        yield status, info_text, [(metric, size, warn_levels, crit_levels)]


def memory_perc_check(processes, params, total_ram):
    """Check levels that are in percent of the total RAM of the host"""
    if not total_ram:
        return 3, "percentual RAM levels configured, but total RAM is unknown"

    resident_perc = 100 * float(processes.resident_size * 1024) / total_ram
    return check_levels(resident_perc,
                        None,
                        params["resident_levels_perc"],
                        human_readable_func=get_percent_human_readable,
                        infoname="Percentage of total RAM")


def cpu_check(percent_cpu, item, params):
    """Check levels for cpu utilization from given process"""

    infotext = "CPU"
    warn_cpu, crit_cpu = params.get("cpulevels", (None, None, None))[:2]
    perf_data = [("pcpu", percent_cpu, warn_cpu, crit_cpu)]

    # CPU might come with previous
    if "cpu_average" in params:
        infotext = "CPU: %s" % get_percent_human_readable(percent_cpu)
        now = time.time()
        avg_cpu = get_average("ps.%s.cpu" % item, now, percent_cpu, params["cpu_average"], False)
        infotext += ", %d min average" % params["cpu_average"]
        perf_data.append(("pcpuavg", avg_cpu, warn_cpu, crit_cpu, 0, params["cpu_average"]))
        percent_cpu = avg_cpu  # use this for level comparison

    state, infotext, _ = check_levels(percent_cpu,
                                      None, (warn_cpu, crit_cpu),
                                      human_readable_func=get_percent_human_readable,
                                      infoname=infotext)
    return state, infotext, perf_data


def individual_process_check(processes, params):
    levels = params["single_cpulevels"]
    for p in processes:
        cpu_usage, name, pid = 0.0, None, None

        for the_item, (value, _unit) in p:
            if the_item == "name":
                name = value
            if the_item == "pid":
                pid = value
            elif the_item.startswith("cpu usage"):
                cpu_usage += value

        process_description = name + " with PID %s CPU" % pid if pid else ""
        state, infotext, _ = check_levels(cpu_usage,
                                          None,
                                          levels,
                                          human_readable_func=get_percent_human_readable,
                                          infoname=process_description)
        if state:
            yield state, infotext


def uptime_check(times, params):
    """Check how long the process is running"""
    if times.min_elapsed == times.max_elapsed:
        yield check_levels(
            times.min_elapsed,
            None,
            params.get("max_age", (None, None)) + params.get("min_age", (None, None)),
            human_readable_func=get_age_human_readable,
            infoname="running for",
        )
    else:
        yield check_levels(
            times.min_elapsed,
            None,
            (None, None) + params.get("min_age", (None, None)),
            human_readable_func=get_age_human_readable,
            infoname="youngest running for",
        )
        yield check_levels(
            times.max_elapsed,
            None,
            params.get("max_age", (None, None)),
            human_readable_func=get_age_human_readable,
            infoname="oldest running for",
        )


def handle_count_check(processes, params):
    return check_levels(processes.handle_count,
                        "process_handles",
                        params.get("handle_count", (None, None)),
                        human_readable_func=int,
                        infoname="process handles")
