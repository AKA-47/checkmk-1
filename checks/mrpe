#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
import urllib


def inventory_mrpe(info):
    items = []
    for line in info:
        # New Linux agent sends (check_name) in first column. Stay
        # compatible with MRPE versions not providing this info
        if line[0].startswith("("):
            item = line[1]
        else:
            item = line[0]
        item = urllib.unquote(item)
        items.append((item, None))
    return items


def mrpe_parse_perfdata(perfinfo):
    if '=' not in perfinfo:
        return None
    varname, valuetxt = perfinfo.split("=", 1)
    values = valuetxt.split(";")
    return tuple([varname] + values)


def check_mrpe(item, _no_params, info):
    # This check is cluster-aware. An item might be found
    # more than once. In that case we use the best of the
    # multiple statuses.

    best_state = None

    for raw_line in info:
        if raw_line[0].startswith("("):
            check_name = raw_line[0][1:-1]
            raw_line = raw_line[1:]
        else:
            check_name = None
        if urllib.unquote(raw_line[0]) == item:
            try:
                state = int(raw_line[1])
            except (IndexError, ValueError):
                state = None

            # convert to original format by joining and replacing \1 back with \n
            rest = " ".join(raw_line[2:]).replace("\1", "\n")
            # split into lines
            lines = rest.split('\n')
            # First line:  OUTPUT|PERFDATA
            parts = lines[0].split("|", 1)
            output = [parts[0].strip()]
            if state is None or state not in [0, 1, 2, 3]:
                output[0] = "Invalid plugin status %s. Output is: %s" % (state, output[0])
                state = 3
            if len(parts) > 1:
                perfdata = parts[1].strip().split()
            else:
                perfdata = []

            # Further lines
            now_comes_perfdata = False
            for line in lines[1:]:
                if now_comes_perfdata:
                    perfdata += line.split()
                else:
                    parts = line.split("|", 1)
                    output.append(parts[0].strip())
                    if len(parts) > 1:
                        perfdata += parts[1].strip().split()
                        now_comes_perfdata = True


            if best_state in [None, 2] \
               or (state < best_state and state != 2):
                perf_parsed = []
                for perfvalue in perfdata:
                    new_perf = mrpe_parse_perfdata(perfvalue)
                    if new_perf:
                        perf_parsed.append(new_perf)

                # name of check command needed for PNP to choose the correct template
                if check_name:
                    perf_parsed.append(check_name)
                best_result = state, "\n".join(output), perf_parsed
                best_state = state

    if best_state is None:
        return (3, "Check output not found in output of MRPE")
    return best_result


check_info["mrpe"] = {
    'check_function': check_mrpe,
    'inventory_function': inventory_mrpe,
    'service_description': '%s',
    'has_perfdata': True,
}
