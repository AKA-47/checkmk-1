#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def inventory_blade_bx_powermod(info):
    for line in info:
        yield (line[0], None)


def check_blade_bx_powermod(item, _no_param, info):
    power_status = {
        "1": ("unknown", 3),
        "2": ("ok", 0),
        "3": ("not-present", 2),
        "4": ("error", 2),
        "5": ("critical", 2),
        "6": ("off", 2),
        "7": ("dummy", 2),
        "8": ("fanmodule", 0),
    }
    for line in info:
        index, status, product_name = line
        if not index == item:
            continue
        state_readable, state = power_status[status]
    return state, "%s Status is %s" % (product_name, state_readable)


check_info['blade_bx_powermod'] = {
    "inventory_function"    : inventory_blade_bx_powermod,
    "check_function"        : check_blade_bx_powermod,
    "service_description"   : "Power Module %s",
    "snmp_info"             : (".1.3.6.1.4.1.7244.1.1.1.3.2.4.1", [
                                                      1, # s31SysPowerSupplyUnitId
                                                      2, # s31SysPowerSupplyUnitStatus
                                                      4, # s31SysPowerSupplyUnitProductName
   ]),
   "snmp_scan_function" : lambda oid: "BX600" in oid(".1.3.6.1.2.1.1.1.0") \
                            or oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.7244.1.1.1",
}
