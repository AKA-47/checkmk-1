#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import cmk.special_agents.agent_aws as agent_aws

AWSRegions = dict(agent_aws.AWSRegions)

factory_settings['aws_cpu_credits'] = {
    'balance_levels_lower': (10, 5),
}


def parse_aws(info):
    import json
    loaded = []
    for row in info:
        try:
            loaded.extend(json.loads(" ".join(row)))
        except (TypeError, IndexError):
            pass
    return loaded


def _extract_aws_metrics_by_labels(expected_metric_names, parsed, extra_keys=None):
    if extra_keys is None:
        extra_keys = []
    values_by_labels = {}
    for row in parsed:
        row_id = row['Id'].lower()
        row_label = row['Label']
        row_values = row['Values']
        for expected_metric_name in expected_metric_names:
            expected_metric_name_lower = expected_metric_name.lower()
            if not row_id.startswith(expected_metric_name_lower)\
               and not row_id.endswith(expected_metric_name_lower):
                continue

            try:
                value = row_values[0]
            except IndexError:
                continue
            else:
                values_by_labels.setdefault(row_label, {})\
                                .setdefault(expected_metric_name, value)
        for extra_key in extra_keys:
            extra_value = row.get(extra_key)
            if extra_value is None:
                continue
            values_by_labels.setdefault(row_label, {})\
                            .setdefault(extra_key, extra_value)
    return values_by_labels


def inventory_aws_generic(parsed, required_metrics):
    for instance_name, instance in parsed.iteritems():
        if all(required_metric in instance for required_metric in required_metrics):
            yield instance_name, {}


def inventory_aws_generic_single(parsed, required_metrics):
    if all(required_metric in parsed for required_metric in required_metrics):
        return [(None, {})]


def check_aws_limits(aws_service, params, parsed):
    """
    Generic check for checking limits of AWS resource.
    - levels: use plain resource_key
    - performance data: aws_%s_%s % AWS resource, resource_key
    """
    long_output = []
    levels_reached = []
    max_state = 0
    perfdata = []
    for resource_key, resource_title, limit, amount, human_readable_func in parsed:
        if human_readable_func is None:
            human_readable_func = lambda x: "%s" % x

        p_limit, (warn, crit) = params[resource_key]
        if p_limit is None:
            limit_ref = limit
        else:
            limit_ref = p_limit

        infotext = '%s: %s (of max. %s)' % (resource_title, human_readable_func(amount),
                                            human_readable_func(limit_ref))
        perfvar = "aws_%s_%s" % (aws_service, resource_key)
        perfdata.append((perfvar, amount))

        if not limit_ref:
            continue

        state, extrainfo, _perfdata = check_levels(
            100.0 * amount / limit_ref,
            "%s_usage" % perfvar, (warn, crit),
            human_readable_func=get_percent_human_readable,
            infoname="Usage")

        max_state = max(state, max_state)
        if state:
            levels_reached.append(resource_title)
            infotext += ", %s%s" % (extrainfo, state_markers[state])
        long_output.append(infotext)

    if levels_reached:
        yield max_state, 'Levels reached: %s' % ", ".join(levels_reached), perfdata
    else:
        yield 0, 'No levels reached', perfdata
    if long_output:
        yield 0, "\n%s" % "\n".join(long_output)
