#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2016             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def scan_fireeye(oid):
    return oid('.1.3.6.1.2.1.1.2.0').startswith('.1.3.6.1.4.1.25597.1')


def inventory_fireeye_generic(info, has_item, has_params=False):
    if info:
        params = None
        if has_params:
            params = {}
        for line in info:
            item = None
            if has_item:
                item = line[0]
            yield item, params


def check_fireeye_states(states):
    # Now we only known the OK states and health states
    # but we can expand if we know more
    map_states = {
        "status" : {
            'good'   : (0, 'good'),
            'ok'     : (0, 'OK'),
        },
        "disk status" : {
            'online' : (0, 'online'),
        },
        "health" : {
            '1'      : (0, 'healthy'),
            '2'      : (2, 'unhealthy'),
        }
    }
    states_evaluated = {}
    for what, text in states:
        states_evaluated.setdefault(text, \
            map_states[text.lower()].get(what.lower(), (2, "not %s" % what.lower())))

    return states_evaluated


def fireeye_check_generic(infotext, counter, value, warn=None, crit=None):
    perfdata = [(counter, value, warn, crit)]
    if crit and value >= crit:
        return (2, infotext + ' (warn/crit at %d/%d)' % (warn,crit), perfdata)
    elif warn and value >= warn:
        return (1, infotext + ' (warn/crit at %d/%d)' % (warn,crit), perfdata)
    return (0, infotext, perfdata)
