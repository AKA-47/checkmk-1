#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# <<<omd_status>>>
# [kaputt]
# apache 1
# rrdcached 1
# npcd 1
# nagios 1
# crontab 1
# OVERALL 1
# [test]
# apache 1
# rrdcached 1
# npcd 0
# nagios 1
# crontab 1
# OVERALL 2


def inventory_omd_status(sections):
    section_omd_status, section_omd_info = sections

    for site in section_omd_status:
        # if we have omd_info we want to ensure that checks are only executed for sites
        # that do have autostart enabled
        if section_omd_info and 'sites' in section_omd_info and site in section_omd_info['sites']:
            if section_omd_info['sites'][site]['autostart'] == '0':
                continue
        yield site, None


def parse_omd_status(info):
    active = False
    parsed = {}

    for line in info:
        if line[1][0] == '[':
            item = line[1][1:-1]
            # items may appear several times in clusters
            # so dont overwrite the previous node result
            if item not in parsed:
                parsed[item] = {}
            node = line[0]
            parsed[item][node] = {}
            parsed[item][node]["stopped"] = []
            parsed[item][node]["existing"] = []  # this information is required for inventory
            active = True
        elif active and line[1] == 'OVERALL':
            if line[2] == '0':
                parsed[item][node]["overall"] = "running"
            elif line[2] == '1':
                parsed[item][node]["overall"] = "stopped"
            active = False
        elif active:
            parsed[item][node]["existing"].append(line[1])

            if line[2] != '0':
                parsed[item][node]["stopped"].append(line[1])
                parsed[item][node]["overall"] = "partially"

    return parsed


def check_omd_status(item, _no_params, sections):
    section_omd_status, section_omd_info = sections

    parsed_site = section_omd_status.get(item)
    if parsed_site is None:
        return

    number_nodes = len(parsed_site)
    stopped_nodes = len(s for s in parsed_site.values() if s.get("overall") == "stopped")

    for node, services in parsed_site.items():
        node_text = (" on %s" % node) if node else ""

        if "overall" not in services:
            yield 2, "defective installation%s" % node_text
        elif services["overall"] == "running":
            # running sites are always OK
            yield 0, "running%s" % node_text
        elif services["overall"] == "stopped":
            # stopped sites are only CRIT when all are stopped
            yield 2 if stopped_nodes == number_nodes else 0, "stopped%s" % node_text
        else:
            infotext = "partially running%s, stopped services: " % node_text
            infotext += ", ".join(services["stopped"])
            # partially running sites are always CRIT
            yield 2, infotext


check_info["omd_status"] = {
    'check_function': check_omd_status,
    'inventory_function': inventory_omd_status,
    'parse_function': parse_omd_status,
    'service_description': 'OMD %s status',
    'node_info': True,
    "extra_sections": ["omd_info"],
}
