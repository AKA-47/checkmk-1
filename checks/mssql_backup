#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Old agent
# <<<mssql_backup>>>
# MSSQL_SQLEXPRESS test123 1331207325

# Newer agent
# <<<mssql_backup>>>
# MSSQL_SQL0x master 2016-07-08 20:20:27
# MSSQL_SQL0x model 2016-07-08 20:20:28
# MSSQL_SQL0x model 2016-07-12 09:09:42
# MSSQL_SQL0x model 2016-07-11 20:20:07
# MSSQL_SQL0x msdb 2016-07-08 20:20:43
# MSSQL_SQL0x msdb 2016-07-11 20:20:07

# New agent (added backup type)
# <<<mssql_backup>>>
# MSSQL_SQL0x master 2016-07-08 20:20:27 D
# MSSQL_SQL0x model 2016-07-08 20:20:28 D
# MSSQL_SQL0x model 2016-07-12 09:09:42 L
# MSSQL_SQL0x model 2016-07-11 20:20:07 I
# MSSQL_SQL0x msdb 2016-07-08 20:20:43 D
# MSSQL_SQL0x msdb 2016-07-11 20:20:07 I


def parse_mssql_backup(info):
    def _parse_date_and_time(backup_date, backup_time):
        try:
            timestamp = time.mktime(time.strptime(
                        "%s %s" % (backup_date, backup_time),
                        '%Y-%m-%d %H:%M:%S'))
        except ValueError:
            timestamp = None
        return timestamp

    map_backup_types = {
        "D": "database",
        "I": "database diff",
        "L": "log",
        "F": "file or filegroup",
        "G": "file diff",
        "P": "partial",
        "Q": "partial diff",
        "-": "unspecific",
    }

    parsed = {}
    Backup = collections.namedtuple("Backup", ["timestamp", "type", "state"])
    for line in info:
        backup_state = None
        backup_type = None
        if len(line) == 6:
            inst, tablespace, backup_date, backup_time, backup_type, backup_state = line
            timestamp = _parse_date_and_time(backup_date, backup_time)

        elif len(line) == 5:
            inst, tablespace, backup_date, backup_time, backup_type = line
            timestamp = _parse_date_and_time(backup_date, backup_time)

        elif len(line) == 4:
            inst, tablespace, backup_date, backup_time = line
            timestamp = _parse_date_and_time(backup_date, backup_time)

        elif len(line) == 3:
            inst, tablespace, backup_timestamp = line
            try:
                timestamp = int(backup_timestamp)
            except ValueError:
                timestamp = None

        else:
            continue

        parsed.setdefault("%s %s" % (inst, tablespace), []).append(
            Backup(timestamp, map_backup_types.get(backup_type), backup_state))

    return parsed


def inventory_mssql_backup(parsed):
    for db_name in parsed.iterkeys():
        yield db_name, {}


def check_mssql_backup(item, params, parsed):
    if item not in parsed:
        # Assume general connection problem to the database, which is reported
        # by the "X Instance" service and skip this check.
        raise MKCounterWrapped("Failed to connect to database")

    if not isinstance(params, dict):
        params = {"database": params}

    for backup in parsed[item]:
        if backup.state == "no backup found":
            yield params.get("not_found", 1), "State: %s" % backup.state
            continue

        if backup.type is None:
            backup_type_var = "database"
            perfkey = "seconds"
            infotext = "[database] "
        else:
            backup_type_var = backup.type.strip().replace(" ", "_")
            perfkey = "backup_age_%s" % backup_type_var
            infotext = "[%s] " % backup.type

        state = 0
        age_warn, age_crit = params.get(backup_type_var, (None, None))
        sec_ago = time.time() - backup.timestamp
        if age_crit is not None and sec_ago >= age_crit:
            state = 2
        elif age_warn is not None and sec_ago >= age_warn:
            state = 1

        infotext += 'Last backup was at %s (%s ago)' % (
            time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(backup.timestamp)),
            get_age_human_readable(sec_ago))

        if state:
            infotext += " (warn/crit at %s/%s)" % (
                get_age_human_readable(age_warn), get_age_human_readable(age_crit))

        yield state, infotext, [(perfkey, sec_ago, age_warn, age_crit)]


check_info['mssql_backup'] = {
    'parse_function'            : parse_mssql_backup,
    'inventory_function'        : inventory_mssql_backup,
    'check_function'            : check_mssql_backup,
    'default_levels_variable'   : 'mssql_backup_default_levels',
    'service_description'       : 'MSSQL %s Backup',
    'has_perfdata'              : True,
    'group'                     : 'mssql_backup',
}
