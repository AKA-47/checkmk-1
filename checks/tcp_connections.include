#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# parsed = {
#     "ESTABLISHED" : 6,
#     "BOUND"       : 17,
#     "SYN_SENT"    : 1,
#     "LISTEN"      : 10,
# }

tcp_conn_stats_default_levels = {}


def inventory_tcp_connections(parsed):
    if parsed:
        return [(None, 'tcp_conn_stats_default_levels')]


def check_tcp_connections(item, params, parsed):
    if not parsed:
        yield 0, "Currently no TCP connections"
        return

    for tcp_state, tcp_count in parsed.iteritems():
        if tcp_count <= 0:
            continue

        infotext = "%s: %s" % (tcp_state, tcp_count)
        state = 0
        warn, crit = params.get(tcp_state, (None, None))
        if crit is not None and tcp_count >= crit:
            state = 2
        elif warn is not None and tcp_count >= warn:
            state = 1
        if state:
            infotext += " (warn/crit at %d/%d)" % (warn, crit)
        yield state, infotext, [(tcp_state, tcp_count, warn, crit)]
