#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def _get_tag_options(tag_values, prefix):
    options = []
    for key, values in tag_values:
        options.append('--%s-tag-key' % prefix)
        options.append(key)
        options.append('--%s-tag-values' % prefix)
        options += values
    return options


def _get_services_choice(services):
    # '--services': {
    #   's3': {'choice': ('tags', [('KEY', ['VAL1', 'VAL2'])])},
    #   'ec2': {'choice': 'all'},
    #   'ebs': {'choice': ('names', ['ebs1', 'ebs2'])},
    # }
    service_args = []
    for service_name, service_choice in services.iteritems():
        if service_choice is None:
            continue

        choice = service_choice.get('choice')
        if not isinstance(choice, tuple):
            # 'all' is handled by services.keys()
            continue

        choice_type, choice_values = choice
        if not choice_values:
            continue

        if choice_type == "names":
            service_args.append("--%s-names" % service_name)
            service_args += choice_values

        elif choice_type == "tags":
            service_args += _get_tag_options(choice_values, service_name)
    return service_args


def agent_aws_arguments(params, hostname, ipaddress):
    args = [
        "--aws-access-key-id",
        params["aws_access_key_id"],
        "--aws-secret-access-key",
        passwordstore_get_cmdline("%s", params["aws_secret_access_key"]),
    ]
    args.append("--regions")
    args += params["regions"]

    # '--overall-tags': [('KEY_1', ['VAL_1', 'VAL_2']), ...)],
    args += _get_tag_options(params.get('overall_tags', []), 'overall')

    services = params.get("services", {})
    if services:
        args.append("--services")
        # We need to sort the inner services-as-a-dict-params
        # in order to create reliable tests
        args += sorted(services.keys())

    args += _get_services_choice(services)
    args += [
        "--hostname",
        hostname,
    ]
    return args


special_agent_info['aws'] = agent_aws_arguments
