#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<postgres_sessions>>>
# f 1
# t 4

# instance
# <<<postgres_locks>>>
# [[[foobar]]]
# f 1
# t 4

# t -> idle sessions, f -> active sessions
# Note: one (or both?) lines might be missing. They will never show 0.


def parse_postgres_sessions(info):
    parsed = {}
    instance_name = ""
    for line in info:
        if line[0].startswith("[[[") and line[0].endswith("]]]"):
            instance_name = line[0][3:-3].upper()
            continue
        instance = parsed.setdefault(instance_name, {
            "total": 0,
            "running": 0,
        })
        if line[0].startswith("t"):
            instance["total"] = int(line[1])
        elif line[0].startswith("f"):
            instance["running"] = int(line[1])
    return parsed


def inventory_postgres_sessions(parsed):
    return [ (db, {}) for db, dbinfo in parsed.items() if dbinfo  ]


def check_postgres_sessions(item, params, parsed):
    if item not in parsed:
        # In case of missing information we assume that the login into
        # the database has failed and we simply skip this check. It won't
        # switch to UNKNOWN, but will get stale.
        raise MKCounterWrapped("Login into database failed")

    data = parsed[item]
    idle = data['total']
    running = data['running']
    total = idle + running

    for key, val in [
        ("total",   total),
        ("running", running),
    ]:
        infotext = "%s: %s" % (key.title(), val)
        warn, crit = params.get(key, (None, None))
        state = 0
        if crit is not None  and val >= crit:
            state = 2
        elif warn is not None and val >= warn:
            state = 1
        if state:
            infotext += " (warn/crit at %s/%s)" % (warn, crit)
        yield state, infotext, [(key, val, warn, crit)]


check_info['postgres_sessions'] = {
    "parse_function"          : parse_postgres_sessions,
    "inventory_function"      : inventory_postgres_sessions,
    "check_function"          : check_postgres_sessions,
    "service_description"     : "PostgreSQL Daemon Sessions %s",
    "has_perfdata"            : True,
    "group"                   : "postgres_instance_sessions",
}
