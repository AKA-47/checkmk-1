#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# TODO: see why it's not enough to have it in legacy_docker.include
def append_deprecation_warning(check_function):
    '''A wrapper to WARN if legacy code is used

    If the parse result is of one of the legacy Types the decorated
    check function will yield an additional WARNING state.

    These legacy parse results correspond to agents/plugins from version
    1.5.0b1 to 1.5.0p12
    '''

    @functools.wraps(check_function)
    def wrapper(item, params, parsed):

        is_deprecated = isinstance(parsed, (DeprecatedDict, DeprecatedList))
        catch_these = Exception if is_deprecated else ()

        try:
            results = check_function(item, params, parsed)
            if isinstance(results, tuple):
                yield results
            else:
                for result in results:
                    yield result
        except catch_these:
            yield 3, "Could not handle data"
        finally:
            if is_deprecated:
                yield 1, ("Deprecated plugin/agent (see long output)(!)\n"
                          "You are using legacy code, which may lead to crashes and/or"
                          " incomplete information. Please upgrade the monitored host to"
                          " use the plugin 'mk_docker.py'.")

    return wrapper


def parse_docker_node_disk_usage(info):
    version = docker_get_version(info)  # pylint: disable=undefined-variable

    if version is None:
        return parse_legacy_docker_system_df(info)  # pylint: disable=undefined-variable

    table_rows = map(docker_json_get_obj, info[1:])  # pylint: disable=undefined-variable
    return {r.get('type'): r for r in table_rows if r is not None}


@append_deprecation_warning  # pylint: disable=undefined-variable
@get_parsed_item_data
def check_docker_node_disk_usage(_no_item, params, data):

    for param, conversion_func in (
        ('size', get_filesize_human_readable),
        ('reclaimable', get_filesize_human_readable),
        ('count', lambda x: x),
        ('active', lambda x: x),
    ):
        value = data[param]

        warn, crit = params.get(param, (None, None))
        if crit is not None and value >= crit:
            status, lvl_text = 2, " (warn/crit at %s/%s)" % (warn, crit)
        elif warn is not None and value >= warn:
            status, lvl_text = 1, " (warn/crit at %s/%s)" % (warn, crit)
        else:
            status, lvl_text = 0, ""

        infotext = "%s: %s%s" % (param, conversion_func(value), lvl_text)
        perfdata = [(param, value, warn, crit)]

        yield status, infotext, perfdata


check_info["docker_node_disk_usage"] = {
    "parse_function": parse_docker_node_disk_usage,
    "inventory_function": discover(),
    "check_function": check_docker_node_disk_usage,
    "service_description": "Docker disk usage - %s",
    "includes": ['docker.include', 'legacy_docker.include'],
    "has_perfdata": True,
    "group": "docker_node_disk_usage",
}
