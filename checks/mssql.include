#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

#   .--helper--------------------------------------------------------------.
#   |                    _          _                                      |
#   |                   | |__   ___| |_ __   ___ _ __                      |
#   |                   | '_ \ / _ \ | '_ \ / _ \ '__|                     |
#   |                   | | | |  __/ | |_) |  __/ |                        |
#   |                   |_| |_|\___|_| .__/ \___|_|                        |
#   |                                |_|                                   |
#   '----------------------------------------------------------------------'

import cmk.base.plugins.agent_based.mssql_databases

parse_mssql_databases = cmk.base.plugins.agent_based.mssql_databases.parse_mssql_databases


def _format_item_mssql_datafiles(inst, database, file_name):
    if inst is None:
        return "%s.%s" % (database, file_name)
    elif file_name is None:
        return "%s.%s" % (inst, database)
    return "%s.%s.%s" % (inst, database, file_name)


def _mssql_datafiles_process_sizes(params, used_size, allocated_size, max_size, unlimited):
    def calculate_levels(levels, reference_value):
        if isinstance(levels[0], float):
            if reference_value:
                return (
                    levels[0] * reference_value / 100.0,
                    levels[1] * reference_value / 100.0,
                )
        elif levels[0] is not None:
            return (
                levels[0] * 1024 * 1024,
                levels[1] * 1024 * 1024,
            )

        return None, None

    if unlimited:
        max_size = None

    for param_key, name, perf_key, value, reference_value in [
        ('used_levels', "Used", "data_size", used_size, max_size),
        ('allocated_used_levels', "Allocated used", None, used_size, allocated_size),
        ('allocated_levels', "Allocated", "allocated_size", allocated_size, max_size),
    ]:
        levels = params.get(param_key, (None, None))
        if isinstance(levels, list):
            warn, crit = None, None
            for level_set in levels:
                if max_size > level_set[0]:
                    warn, crit = calculate_levels(level_set[1], reference_value)
                    break
        else:
            warn, crit = calculate_levels(levels, reference_value)

        yield check_levels(
            value,
            perf_key,
            (warn, crit),
            human_readable_func=get_bytes_human_readable,
            infoname=name,
            boundaries=(0, reference_value),
        )

    yield 0, "Maximum size: %s" % ("unlimited"
                                   if max_size is None else get_bytes_human_readable(max_size))


#.

mssql_transactionlogs_discovery = []


def inventory_mssql_datafiles(mode, parsed_extra):
    parsed = parsed_extra[0]
    parsed_databases = parse_mssql_databases(parsed_extra[1])

    settings = host_extra_conf(host_name(), mssql_transactionlogs_discovery)
    summarize = settings and settings[0].get("summarize_%s" % mode, False)
    for inst, database, file_name in parsed:
        if mode == 'transactionlogs':
            dbinst = "%s %s" % (inst, database)
            if parsed_databases.get(dbinst, {}).get('Recovery', u'') == u'SIMPLE':
                # ignore DBs with SIMPLE Recovery, these do not use transaction logs
                continue
        if summarize:
            yield _format_item_mssql_datafiles(inst, database, None), {}
        else:
            yield _format_item_mssql_datafiles(inst, database, file_name), {}


def check_mssql_datafiles(item, params, parsed_extra):
    parsed, _section_mssql_databases = parsed_extra  # only needed for discovery
    max_size_sum = 0
    allocated_size_sum = 0
    used_size_sum = 0
    unlimited_sum = False

    found = False
    for (inst, database, file_name), values in parsed.items():
        if _format_item_mssql_datafiles(inst, database, file_name) == item or \
                _format_item_mssql_datafiles(inst, database, None) == item:
            found = True
            max_size = values["max_size"]
            allocated_size = values["allocated_size"]
            used_size = values["used_size"]
            if max_size:
                max_size_sum += max_size
            if allocated_size:
                allocated_size_sum += allocated_size
            if used_size:
                used_size_sum += used_size
            unlimited_sum = unlimited_sum or values["unlimited"]

    if not found:
        # Assume general connection problem to the database, which is reported
        # by the "X Instance" service and skip this check.
        raise MKCounterWrapped("Failed to connect to database")

    return _mssql_datafiles_process_sizes(params, used_size_sum, allocated_size_sum, max_size_sum,
                                          unlimited_sum)
