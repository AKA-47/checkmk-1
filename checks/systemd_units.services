#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.



factory_settings["systemd_services_default_levels"] = {
    "states" : {"active": 0,
                "inactive": 0,
                "failed": 2,
               },
    "states_default" : 2,
    "else" : 2,  # missleading name, used if service vanishes
}


#   .--single--------------------------------------------------------------.
#   |                          _             _                             |
#   |                      ___(_)_ __   __ _| | ___                        |
#   |                     / __| | '_ \ / _` | |/ _ \                       |
#   |                     \__ \ | | | | (_| | |  __/                       |
#   |                     |___/_|_| |_|\__, |_|\___|                       |
#   |                                  |___/                               |
#   '----------------------------------------------------------------------'


discovery_systemd_units_services_rules = []


def discovery_systemd_units_services(parsed):

    services = parsed.get('service', {})

    def regex_match(what, name):
        if not what:
            return True
        for entry in what:
            if entry.startswith("~"):
                if regex(entry[1:]).match(name):
                    return True
                else:
                    continue
            elif entry == name:
                return True
        return False

    def state_match(rule_states, state):
        return any(s in (None, state) for s in rule_states)

    for rule in discovery_systemd_units_services_rules:
        settings = rule[0]
        descriptions = settings.get("descriptions", [])
        names = settings.get("names", [])
        states = settings.get("states")
        for service in services.values():
            if (regex_match(descriptions, service.description) and
                regex_match(names, service.name) and
                state_match(states, service.active)):
                yield service.name, {}


def check_systemd_units_services(item, params, parsed):

    services = parsed.get('service', {})
    service = services.get(item, None)
    if service is None:
        yield params["else"], "Service not found"
        return

    state = params["states"].get(service.active, params["states_default"])
    yield state, "Status: %s" % service.active
    yield 0, service.description


check_info['systemd_units.services'] = {
    'inventory_function'     : discovery_systemd_units_services,
    'check_function'         : check_systemd_units_services,
    'service_description'    : 'Systemd Service %s',
    'group'                  : 'systemd_services',
    'default_levels_variable': 'systemd_services_default_levels',
}


#.
#   .--summary-------------------------------------------------------------.
#   |                                                                      |
#   |           ___ _   _ _ __ ___  _ __ ___   __ _ _ __ _   _             |
#   |          / __| | | | '_ ` _ \| '_ ` _ \ / _` | '__| | | |            |
#   |          \__ \ |_| | | | | | | | | | | | (_| | |  | |_| |            |
#   |          |___/\__,_|_| |_| |_|_| |_| |_|\__,_|_|   \__, |            |
#   |                                                    |___/             |
#   '----------------------------------------------------------------------'


def discovery_systemd_units_services_summary(_no_parsed):
    yield 'Summary', {}


def check_systemd_units_services_summary(_no_item, params, parsed):
    services = parsed.get('service', {}).values()

    yield 0, "%d services in total" % len(services)

    all_states = sorted(set(s.active for s in services))

    for active_state in all_states:
        state = params["states"].get(active_state, params["states_default"])
        if state == 0:
            continue
        count = sum(s.active == active_state for s in services)
        yield state, "%d services %s" % (count,  active_state)


check_info['systemd_units.services_summary'] = {
    'inventory_function'     : discovery_systemd_units_services_summary,
    'check_function'         : check_systemd_units_services_summary,
    'service_description'    : 'Systemd Service %s',
    'group'                  : 'systemd_services',
    'default_levels_variable': 'systemd_services_default_levels',
}


