#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2017             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# example output

factory_settings["lvm_lvs_default_levels"] = {
    "levels_data": (80.0, 90.0),
    "levels_meta": (80.0, 90.0),
}

LvmLvsEntry = collections.namedtuple('LvmLvsEntry', ['data', 'meta'])


def parse_lvm_lvs(info):
    possible_items = {"%s/%s" % (line[1], line[4]) for line in info if line[4] != ''}

    parsed = {}
    for line in info:
        item = "%s/%s" % (line[1], line[0])
        if item not in possible_items:
            continue

        try:
            parsed[item] = LvmLvsEntry(data=float(line[6]), meta=float(line[7]))
        except (IndexError, ValueError):
            pass
    return parsed


@get_parsed_item_data
def check_lvm_lvs(item, params, entry):
    yield check_levels(entry.data,
                       "data_usage",
                       params["levels_data"],
                       human_readable_func=get_percent_human_readable,
                       infoname="Data usage")
    yield check_levels(entry.meta,
                       "meta_usage",
                       params["levels_meta"],
                       human_readable_func=get_percent_human_readable,
                       infoname="Meta usage")


check_info['lvm_lvs'] = {
    'parse_function': parse_lvm_lvs,
    'inventory_function': discover(),
    'check_function': check_lvm_lvs,
    'service_description': 'LVM LV Pool %s',
    'has_perfdata': True,
    'default_levels_variable': 'lvm_lvs_default_levels',
    'group': 'lvm_lvs_pools',
}
