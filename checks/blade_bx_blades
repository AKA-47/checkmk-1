#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def inventory_blade_bx_blades(info):
    for id_, status, _serial, _name  in info:
        if status != "3": # blade not present
            yield id_, None


def check_blade_bx_blades(item, _no_params, info):
    status_codes = {
        "1": (3, "unknown"),
        "2": (0, "OK"),
        "3": (3, "not present"),
        "4": (2, "error"),
        "5": (2, "critical"),
        "6": (0, "standby"),
    }

    for id_, status, serial, name  in info:
        if id_ == item:
            state, state_readable = status_codes[status]
            if name:
                name_info = "[%s, Serial: %s]" % (name, serial)
            else:
                name_info = "[Serial: %s]" % serial
            return state, "%s Status: %s" % (name_info, state_readable)


check_info['blade_bx_blades'] = {
    "inventory_function"    : inventory_blade_bx_blades,
    "check_function"        : check_blade_bx_blades,
    "service_description"   : "Blade %s",
    "snmp_info"             : (".1.3.6.1.4.1.7244.1.1.1.4.2.1.1", [
                                    1,  # bladeId
                                    2,  # bladestatus
                                    5,  # Serialnumber
                                    21, # Name
                              ]),
   "snmp_scan_function"     : lambda oid: "BX600" in oid(".1.3.6.1.2.1.1.1.0") \
                                  or oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.7244.1.1.1",
}
