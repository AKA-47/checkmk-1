#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.temperature import *  # pylint: disable=wildcard-import,unused-wildcard-import

# .1.3.6.1.2.1.47.1.1.1.1.7.1 PA-500
# .1.3.6.1.2.1.47.1.1.1.1.7.2 Fan #1 Operational
# .1.3.6.1.2.1.47.1.1.1.1.7.3 Fan #2 Operational
# .1.3.6.1.2.1.47.1.1.1.1.7.4 Temperature at MP [U6]
# .1.3.6.1.2.1.47.1.1.1.1.7.5 Temperature at DP [U7]

# .1.3.6.1.2.1.99.1.1.1.1.2 10
# .1.3.6.1.2.1.99.1.1.1.1.3 10
# .1.3.6.1.2.1.99.1.1.1.1.4 8
# .1.3.6.1.2.1.99.1.1.1.1.5 8
# .1.3.6.1.2.1.99.1.1.1.2.2 9
# .1.3.6.1.2.1.99.1.1.1.2.3 9
# .1.3.6.1.2.1.99.1.1.1.2.4 9
# .1.3.6.1.2.1.99.1.1.1.2.5 9
# .1.3.6.1.2.1.99.1.1.1.4.2 1
# .1.3.6.1.2.1.99.1.1.1.4.3 1
# .1.3.6.1.2.1.99.1.1.1.4.4 37
# .1.3.6.1.2.1.99.1.1.1.4.5 40
# .1.3.6.1.2.1.99.1.1.1.5.2 1
# .1.3.6.1.2.1.99.1.1.1.5.3 1
# .1.3.6.1.2.1.99.1.1.1.5.4 1
# .1.3.6.1.2.1.99.1.1.1.5.5 1

ENTITY_SENSOR_TYPES = {
    "1": ("other", "other"),
    "2": ("unknown", "unknown"),
    "3": ("voltage", "V"),
    "4": ("voltage", "V"),
    "5": ("current", "A"),
    "6": ("power", "W"),
    "7": ("freqeuncy", "hz"),
    "8": ("temp", "c"),
    "9": ("percent", "%"),
    "10": ("fan", "RPM"),
    "11": ("volume", "cmm"),  # cubic decimetre dm^3
    "12": ("binary", ""),
}

ENTITY_SENSOR_SCALING = {
    "1": 10**(-24),
    "2": 10**(-21),
    "3": 10**(-18),
    "4": 10**(-15),
    "5": 10**(-12),
    "6": 10**(-9),
    "7": 10**(-6),
    "8": 10**(-3),
    "9": 1,
    "10": 10**(3),
    "11": 10**(6),
    "12": 10**(9),
    "13": 10**(12),
    "14": 10**(15),
    "15": 10**(18),
    "16": 10**(21),
    "17": 10**(24),
}


def _sensor_status_descr(status_nr):
    return {
        "1": "OK",
        "2": "unavailable",
        "3": "non-operational",
    }[status_nr]


def _sensor_state(status_nr):
    return {
        "1": 0,
        "2": 2,
        "3": 1,
    }[status_nr]


def _reformat_sensor_name(name):
    new_name = name
    for s in ['Fan', 'Temperature', '#', '@']:
        new_name = new_name.replace(s, '')
    return f'Sensor {new_name.strip()}'


def parse_entity_sensors(info):
    parsed = {}
    sensor_names = {i[0]: i[1] for i in info[0]}
    for oid_end, sensor_type_nr, scaling_nr, reading, status_nr in info[1]:
        # Some devices such as Palo Alto Network series 3000 support
        # the ENTITY-MIB including sensor/entity names.
        # Others (e.g. Palo Alto Networks Series 200) do not support
        # this MIB, thus we use OID as item instead
        sensor_name = _reformat_sensor_name(sensor_names.get(oid_end, oid_end))
        sensor_type, unit = ENTITY_SENSOR_TYPES[sensor_type_nr]
        parsed.setdefault(sensor_type, {})[sensor_name] = {
            'unit': unit,
            'reading': float(reading) * ENTITY_SENSOR_SCALING[scaling_nr],
            'status_descr': _sensor_status_descr(status_nr),
            'state': _sensor_state(status_nr),
        }
    return parsed


def discover_entity_sensors_temp(parsed):
    yield from ((item, {}) for item in parsed.get('temp', {}))


def discover_entity_sensors_fan(parsed):
    yield from ((item, {}) for item in parsed.get('fan', {}))


# Customer request
factory_settings['entity_sensors_temp_default_variables'] = {
    'levels': (35, 40),
}


def check_entity_sensors_temp(item, params, parsed):
    if not (sensor_reading := parsed.get('temp', {}).get(item)):
        return

    yield check_temperature(sensor_reading['reading'],
                            params,
                            "temp",
                            dev_unit=sensor_reading['unit'],
                            dev_status=sensor_reading['state'],
                            dev_status_name=sensor_reading['status_descr'])


check_info['entity_sensors'] = {
    'parse_function': parse_entity_sensors,
    'inventory_function': discover_entity_sensors_temp,
    'check_function': check_entity_sensors_temp,
    'service_description': 'Temperature %s',
    'has_perfdata': True,
    'snmp_info': [
        (
            ".1.3.6.1.2.1.47.1.1.1.1",
            [
                OID_END,
                CACHED_OID(7),  # ENTITY-MIB::entPhysicalName
            ],
        ),
        (
            ".1.3.6.1.2.1.99.1.1.1",
            [
                OID_END,
                "1",  # entPhySensorType
                "2",  # entPhySensorScale
                "4",  # entPhySensorValue
                "5",  # entPhySensorOperStatus
            ],
        )
    ],
    'snmp_scan_function': lambda oid: "palo alto networks" in oid(".1.3.6.1.2.1.1.1.0").lower(),
    'default_levels_variable': 'entity_sensors_temp_default_variables',
    'group': 'temperature',
}

# Customer request
factory_settings['entity_sensors_fan_default_variables'] = {
    'lower': (2000, 1000),
}


def check_entity_sensors_fan(item, params, parsed):
    if not (sensor_reading := parsed.get('fan', {}).get(item)):
        return

    yield sensor_reading['state'], f"Operational status: {sensor_reading['status_descr']}"
    yield check_levels(sensor_reading['reading'],
                       "fan" if params.get("output_metrics") else None,
                       params.get("upper", (None, None)) + params["lower"],
                       unit=sensor_reading['unit'],
                       human_readable_func=int,
                       infoname="Speed")


check_info['entity_sensors.fan'] = {
    'inventory_function': discover_entity_sensors_fan,
    'check_function': check_entity_sensors_fan,
    'service_description': 'Fan %s',
    'has_perfdata': True,
    'default_levels_variable': 'entity_sensors_fan_default_variables',
    'group': 'hw_fans',
}
