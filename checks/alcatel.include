#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings['alcatel_temp'] = {
    "levels": (45, 50),
}


def alcatel_networking_products_scan_function(oid):
    sys_object_id = ".1.3.6.1.2.1.1.2.0"  # MIB object "sysObjectID"
    alcatel_ind_1_base_mib = ".1.3.6.1.4.1.6486.800"  # MIB object "alcatelIND1BaseMIB"
    return oid(sys_object_id).startswith(alcatel_ind_1_base_mib)


def inventory_alcatel_power(info):
    for line in info:
        oid_end, _, device_type, power_type = line
        if (power_type and power_type != '0' or device_type in [
                '0x35000001', '0x45000002', '0x45000004', '0x45000008', '0x45000009'
        ]):
            yield oid_end, None


def check_alcatel_power(item, _no_params, info):
    for line in info:
        oid_end, status, device_type, power_type = line
        if item == oid_end:
            if (power_type and power_type == '0' or device_type not in [
                    '0x35000001', '0x45000004', '0x45000002', '0x45000008', '0x45000009'
            ]):
                return 3, "No Power supply connected to this port"
            if status != '1':
                return 2, "Supply in error condition (%s)" % status
            return 0, "Supply status OK"
    return 3, "Supply not found"


def inventory_alcatel_temp(info):
    with_slot = len(info) != 1
    for index, row in enumerate(info):
        for oid, name in enumerate(["Board", "CPU"]):
            if row[oid] != '0':
                if with_slot:
                    yield "Slot %s %s" % (index + 1, name), {}
                else:
                    yield name, {}


def check_alcatel_temp(item, params, info):
    if len(info) == 1:
        slot_index = 0
    else:
        slot = int(item.split()[1])
        slot_index = slot - 1
    sensor = item.split()[-1]
    items = {"Board": 0, "CPU": 1}
    try:
        # If multiple switches are staked and one of them are
        # not reachable, prevent a exception
        temp_celsius = int(info[slot_index][items[sensor]])
    except:
        return 3, "Sensor not found"
    return check_temperature(temp_celsius, params, "alcatel_temp_%s" % item)
