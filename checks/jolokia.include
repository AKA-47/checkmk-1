#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#   .--Parse---------------------------------------------------------------.
#   |                      ____                                            |
#   |                     |  _ \ __ _ _ __ ___  ___                        |
#   |                     | |_) / _` | '__/ __|/ _ \                       |
#   |                     |  __/ (_| | |  \__ \  __/                       |
#   |                     |_|   \__,_|_|  |___/\___|                       |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def jolokia_basic_split(line, expected_length):
    # line should consist of $expected_length tokens,
    # if there are more, we assume the second one
    # was split up by it's spaces.
    if len(line) == expected_length:
        return line
    if len(line) < expected_length:
        raise ValueError("Too few values: %r (expected >= %d)" \
                         % (line, expected_length))
    if expected_length < 2:
        raise NotImplementedError("use 'join' to create single token")
    tokens = line[:]
    while len(tokens) > expected_length:
        # len(tokens) is at least 3!
        tokens[1] += " %s" % tokens.pop(2)
    return tokens


def jolokoia_extract_opt(instance_raw):
    if ',' not in instance_raw:
        return instance_raw, {}, []

    instance, raw = instance_raw.split(',', 1)

    attr = {}
    pos = []
    for part in raw.split(','):
        if ":" in part:
            part = part.split(":", 1)[1]
        if "=" in part:
            key, val = part.split("=")
            attr[key] = val
        else:
            pos.append(part)

    return instance, attr, pos
