#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def inventory_elphase(parsed):
    for item in parsed.keys():
        yield item, {}


_RENDER_FUNCTION_AND_UNIT = {
    "%": (
        get_percent_human_readable,
        "",
    ),
    "mA": (
        lambda current: "%.1f" % (current * 1000),
        "mA",
    )
}


# Parsed has the following form:
# parsed = {
#    "Phase 1" : {
#        "device_state" : (1, "warning"),                 # overall device state: state, state readable
#        "voltage" : (220.17, (1, "Voltage is too low")), # with device state
#        "current" : 12.0,                                # without device state
#     }
# }
def check_elphase(item, params, parsed):
    if item not in parsed:
        return  # Item not found in SNMP data

    class Bounds(object):
        Lower, Upper, Both = range(3)

    if params is None:
        params = {}

    if "device_state" in parsed[item]:
        device_state, device_state_readable = parsed[item]["device_state"]
        if params.get("map_device_states", []):
            device_state_params = dict(params["map_device_states"])
            if device_state in device_state_params:
                state = device_state_params[device_state]
            elif device_state_readable in device_state_params:
                state = device_state_params[device_state_readable]
            else:
                state = 0
        else:
            state = device_state
        yield state, "Device status: %s(%s)" % (device_state_readable, device_state)

    for what, title, unit, bound, factor in [
        ("voltage", "Voltage", "V", Bounds.Lower, 1),
        ("current", "Current", "A", Bounds.Upper, 1),
        ("output_load", "Load", "%", Bounds.Upper, 1),
        ("power", "Power", "W", Bounds.Upper, 1),
        ("appower", "Apparent Power", "VA", Bounds.Upper, 1),
        ("energy", "Energy", "Wh", Bounds.Upper, 1),
        ("frequency", "Frequency", "hz", Bounds.Both, 1),
        ("differential_current_ac", "Differential current AC", "mA", Bounds.Upper, 0.001),
        ("differential_current_dc", "Differential current DC", "mA", Bounds.Upper, 0.001),
    ]:

        if what in parsed[item]:
            entry = parsed[item][what]
            if isinstance(entry, tuple):
                value, state_info = entry  # (220.17, (1, "Voltage is too low"))
            else:
                value = entry  # 12.0
                state_info = None

            levels = [None] * 4
            if what in params:
                if bound == Bounds.Both:
                    levels = params[what]
                elif bound == Bounds.Upper:
                    levels[:2] = params[what]
                else:  # Bounds.Lower
                    levels[2:] = params[what]

            render_func, unit = _RENDER_FUNCTION_AND_UNIT.get(
                unit,
                (
                    lambda v: "%.1f" % v,
                    unit,
                ),
            )

            yield check_levels(
                value * factor,
                what,
                tuple(level if level is None else level * factor for level in levels),
                unit=unit,
                human_readable_func=render_func,
                infoname=title,
            )

            if state_info:
                yield state_info
