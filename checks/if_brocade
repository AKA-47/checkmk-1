#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


@network_interface_scan_registry.register
def snmp_scan_function_if_brocade(oid):
    return "Brocade VDX Switch" in oid(".1.3.6.1.2.1.1.1.0") and (not if64_disabled(
        host_name())) and has_ifHCInOctets(oid)


def if_brocade_convert(info):
    iftab, ssidtab = info
    ssid_dict = dict(ssidtab)
    new_info = []
    for line in iftab:
        if line[20].startswith("Point-2-Point"):
            continue
        else:
            ifName = line[1]

            new_line = line[:-1]
            if line[20].startswith("Logical Network"):
                new_line[1] += " Logical"
                ssid = ssid_dict.get(ifName, "")
                if ssid:
                    new_line[1] += " " + ssid
            new_line[1] = new_line[1].strip()
            new_info.append(new_line)
    return new_info


def inventory_if_brocade(info):
    info = if_brocade_convert(info)
    fix_if_64_highspeed(info)
    return inventory_if_common(info)


def check_if_brocade(item, params, info):
    info = if_brocade_convert(info)
    fix_if_64_highspeed(info)
    return check_if_common(item, params, info)


check_info["if_brocade"] = {
    'includes': ["if.include"],
    'check_function': check_if_brocade,
    'inventory_function': inventory_if_brocade,
    'service_description': 'Interface %s',
    'has_perfdata': True,
    'snmp_info': [
        (
            ".1.3.6.1.2.1",
            [
                "2.2.1.1",  #  0 ifIndex
                "31.1.1.1.1",  #    ifName (brocade has no useful information if Descr)
                "2.2.1.3",  #  2 ifType
                "31.1.1.1.15",  #    ifHighSpeed              .. 1000 means 1Gbit
                "2.2.1.8",  #  4 ifOperStatus
                "31.1.1.1.6",  #  5 ifHCInOctets
                "31.1.1.1.7",  #  6 ifHCInUcastPkts
                "31.1.1.1.8",  #  7 ifHCInMulticastPkts
                "31.1.1.1.9",  #  8 ifHCInBroadcastPkts
                "2.2.1.13",  #  9 ifInDiscards
                "2.2.1.14",  # 10 ifInErrors
                "31.1.1.1.10",  # 11 ifHCOutOctets
                "31.1.1.1.11",  # 12 ifHCOutUcastPkts
                "31.1.1.1.12",  # 13 ifHCOutMulticastPkts
                "31.1.1.1.13",  # 14 ifHCOutBroadcastPkts
                "2.2.1.19",  # 15 ifOutDiscards
                "2.2.1.20",  # 16 ifOutErrors
                "2.2.1.21",  # 17 ifOutQLen
                "31.1.1.1.18",  # 18 ifAlias
                BINARY("2.2.1.6"),  # 19 ifPhysAddress
                # Used in order to ignore    some logical NICs
                "2.2.1.2",  # 20 ifDescr
            ]),
        (".1.3.6.1.4.1.2356.11.1.3.56.1", [1, 3])  # brocade: SSID             21
    ],
    # check if number of network interfaces (IF-MIB::ifNumber.0) is at least 2
    'snmp_scan_function': snmp_scan_function_if_brocade,
    'group': 'if',
    'default_levels_variable': 'if_default_levels',
}
