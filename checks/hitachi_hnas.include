#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_hnas_physical_volumes(volume_data):
    status_map = {
        '1': 'unformatted',
        '2': 'mounted',
        '3': 'formatted',
        '4': 'needsChecking',
    }

    parsed_volumes = {}

    for volume_id, label, status_id, size, avail, evs in volume_data:
        if volume_id == '':
            continue
        volume = '%s %s' % (volume_id, label)
        status = status_map.get(status_id, 'unidentified')
        size_mb = int(size) / 1048576.0 if size else None
        avail_mb = int(avail) / 1048576.0 if avail else None
        parsed_volumes[volume] = (status, size_mb, avail_mb, evs)

    return parsed_volumes


def hitachin_hnas_scan_function(oid):
    system_oid = oid(".1.3.6.1.2.1.1.2.0")

    if system_oid.startswith(".1.3.6.1.4.1.11096.6"):
        return True

    # e.g. HM800 report "linux" as type. Check the vendor tree too
    return system_oid.startswith(".1.3.6.1.4.1.8072.3.2.10") \
        and oid(".1.3.6.1.4.1.11096.6.1.*")
