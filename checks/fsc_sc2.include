#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


#   .--CPU status----------------------------------------------------------.
#   |            ____ ____  _   _       _        _                         |
#   |           / ___|  _ \| | | |  ___| |_ __ _| |_ _   _ ___             |
#   |          | |   | |_) | | | | / __| __/ _` | __| | | / __|            |
#   |          | |___|  __/| |_| | \__ \ || (_| | |_| |_| \__ \            |
#   |           \____|_|    \___/  |___/\__\__,_|\__|\__,_|___/            |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def inventory_fsc_sc2_cpu_status(info):
    for line in info:
        if line[1] != '2':
            yield line[0], None


def check_fsc_sc2_cpu_status(item, _no_params, info):
    def get_cpu_status(status):
        return {
            '1' :   (3, 'unknown'),
            '2' :   (3, 'not-present'),
            '3' :   (0, 'ok'),
            '4' :   (0, 'disabled'),
            '5' :   (2, 'error'),
            '6' :   (2, 'failed'),
            '7' :   (1, 'missing-termination'),
            '8' :   (1, 'prefailure-warning'),
        }.get(status, (3, 'unknown'))
    for designation, status, model, speed, cores in info:
        if designation == item:
            status_state, status_txt = get_cpu_status(status)
            return status_state, 'Status is {0}, {1}, {2} cores @ {3} MHz'.format(status_txt, model, cores, speed)


#.
#   .--mem status----------------------------------------------------------.
#   |                                       _        _                     |
#   |        _ __ ___   ___ _ __ ___    ___| |_ __ _| |_ _   _ ___         |
#   |       | '_ ` _ \ / _ \ '_ ` _ \  / __| __/ _` | __| | | / __|        |
#   |       | | | | | |  __/ | | | | | \__ \ || (_| | |_| |_| \__ \        |
#   |       |_| |_| |_|\___|_| |_| |_| |___/\__\__,_|\__|\__,_|___/        |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def inventory_fsc_sc2_mem_status(info):
    for line in info:
        if line[1] != '2':
            yield line[0], None


def check_fsc_sc2_mem_status(item, _no_params, info):
    def get_mem_status(status):
        return {
            '1' :   (3, 'unknown'),
            '2' :   (3, 'not-present'),
            '3' :   (0, 'ok'),
            '4' :   (0, 'disabled'),
            '5' :   (2, 'error'),
            '6' :   (2, 'failed'),
            '7' :   (1, 'prefailure-predicted'),
            '11':   (0, 'hidden'),
        }.get(status, (3, 'unknown'))
    for designation, status, capacity in info:
        if designation == item:
            status_state, status_txt = get_mem_status(status)
            return status_state, 'Status is {0}, Size {1} MB'.format(status_txt, capacity)


#.
#   .--fans----------------------------------------------------------------.
#   |                          __                                          |
#   |                         / _| __ _ _ __  ___                          |
#   |                        | |_ / _` | '_ \/ __|                         |
#   |                        |  _| (_| | | | \__ \                         |
#   |                        |_|  \__,_|_| |_|___/                         |
#   |                                                                      |
#   '----------------------------------------------------------------------'


factory_settings['fan_fsc_sc2_levels'] = {
    'lower' : ( 1500, 2000),
}

def inventory_fsc_sc2_fans(info):
    for line in info:
        yield line [0], {}


def check_fsc_sc2_fans(item, params, info):
    status_map = {
        '1': (3, 'Status is unknown'),
        '2': (0, 'Status is disabled'),
        '3': (0, 'Status is ok'),
        '4': (2, 'Status is failed'),
        '5': (1, 'Status is prefailure-predicted'),
        '6': (1, 'Status is redundant-fan-failed'),
        '7': (3, 'Status is not-manageable'),
        '8': (0, 'Status is not-present'),
    }

    if type(params) == tuple:
        params = { 'lower' : params }

    for designation, status, rpm in info:
        if designation == item:
            # in this case booth values are important
            if rpm:
                yield check_fan(int(rpm), params)
            else:
                yield 3, "Device did not deliver rpm values"

            yield status_map.get(status, (3, 'Status is unknown'))

factory_settings['fan_fsc_sc2_levels'] = {
    'lower' : ( 1500, 2000),
}


#.
#   .--power comsumption---------------------------------------------------.
#   |                                                                      |
#   |                    _ __   _____      _____ _ __                      |
#   |                   | '_ \ / _ \ \ /\ / / _ \ '__|                     |
#   |                   | |_) | (_) \ V  V /  __/ |                        |
#   |                   | .__/ \___/ \_/\_/ \___|_|                        |
#   |                   |_|                                                |
#   |                                                 _   _                |
#   |    ___ ___  _ __ ___  ___ _   _ _ __ ___  _ __ | |_(_) ___  _ __     |
#   |   / __/ _ \| '_ ` _ \/ __| | | | '_ ` _ \| '_ \| __| |/ _ \| '_ \    |
#   |  | (_| (_) | | | | | \__ \ |_| | | | | | | |_) | |_| | (_) | | | |   |
#   |   \___\___/|_| |_| |_|___/\__,_|_| |_| |_| .__/ \__|_|\___/|_| |_|   |
#   |                                          |_|                         |
#   '----------------------------------------------------------------------'


def parse_fsc_sc2_power_consumption(info):
    parsed = {}
    for designation, value in info:
        # sometimes the device does not return a value
        if not value:
            parsed.setdefault(designation, {"device_state": (3,'Error on device while reading value')})
        else:
            parsed.setdefault(designation, {"power": int(value)})
    return parsed


#.
#   .--info----------------------------------------------------------------.
#   |                          _        __                                 |
#   |                         (_)_ __  / _| ___                            |
#   |                         | | '_ \| |_ / _ \                           |
#   |                         | | | | |  _| (_) |                          |
#   |                         |_|_| |_|_|  \___/                           |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def inventory_fsc_sc2_info(info):
    if info:
        return [ (None, None) ]


def check_fsc_sc2_info(_no_item, _no_params, info):
    if info:
        return (0, 'Model: {0}, Serial Number: {1}, BIOS Version: {2}'.format(info[0][0], info[0][1], info[0][2]))


#.
#   .--temperature---------------------------------------------------------.
#   |      _                                      _                        |
#   |     | |_ ___ _ __ ___  _ __   ___ _ __ __ _| |_ _   _ _ __ ___       |
#   |     | __/ _ \ '_ ` _ \| '_ \ / _ \ '__/ _` | __| | | | '__/ _ \      |
#   |     | ||  __/ | | | | | |_) |  __/ | | (_| | |_| |_| | | |  __/      |
#   |      \__\___|_| |_| |_| .__/ \___|_|  \__,_|\__|\__,_|_|  \___|      |
#   |                       |_|                                            |
#   '----------------------------------------------------------------------'


def inventory_fsc_sc2_temp(info):
    for line in info:
        if line[1] != '2':
            yield line[0], {}


def check_fsc_sc2_temp(item, params, info):
    temp_status = {
        '1' :   (3, 'unknown'),
        '2' :   (0, 'not-available'),
        '3' :   (0, 'ok'),
        '4' :   (2, 'sensor-failed'),
        '5' :   (2, 'failed'),
        '6' :   (1, 'temperature-warning-toohot'),
        '7' :   (2, 'temperature-critical-toohot'),
        '8' :   (0, 'temperature-normal'),
        '9' :   (1, 'temperature-warning')
    }

    for designation, status, temp, dev_warn, dev_crit in info:
        if designation == item:
            if not temp:
                return 3, 'Did not receive temperature data'

            dev_status, dev_status_name = temp_status.get(status, (3, 'unknown'))

            if not dev_warn or not dev_crit:
                return 3, 'Did not receive device levels'

            dev_levels = int(dev_warn), int(dev_crit)

            return check_temperature(int(temp), params, 'temp_{}'.format(item.replace(' ', '_')),
                                     'c', dev_levels, None, dev_status, dev_status_name)


#.
#   .--voltage-------------------------------------------------------------.
#   |                             _ _                                      |
#   |                 __   _____ | | |_ __ _  __ _  ___                    |
#   |                 \ \ / / _ \| | __/ _` |/ _` |/ _ \                   |
#   |                  \ V / (_) | | || (_| | (_| |  __/                   |
#   |                   \_/ \___/|_|\__\__,_|\__, |\___|                   |
#   |                                        |___/                         |
#   '----------------------------------------------------------------------'


def parse_fsc_sc2_voltage(info):
    parsed = {}
    for designation, value, min_value, max_value in info:
        try:
            value = float(value)/1000.0
            min_value = float(min_value)/1000.0
            max_value = float(max_value)/1000.0
        except ValueError:
            dev_state = 3, 'Could not get all values'
            parsed.setdefault(designation, {"device_state": dev_state})
        else:
            dev_state = value
            if value < min_value:
                dev_state = value, (2, 'too low, deceeds %.2f V' % min_value)
            elif value >= max_value:
                dev_state = value, (2, 'too high, exceeds %.2f V' % max_value)
            parsed.setdefault(designation, {"voltage": dev_state})
    return parsed
