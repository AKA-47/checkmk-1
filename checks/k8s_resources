#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_k8s_resources(info):
    import json
    return json.loads(info[0][0])


def get_k8s_resources_inventory_function(name):
    def inventory_function(parsed):
        if parsed.get('capacity', {}).get(name):
            return [(None, {})]

    return inventory_function


check_info['k8s_resources'] = {
    'parse_function': parse_k8s_resources,
}


def check_k8s_pod_resources(_no_item, params, parsed):
    pods = parsed.get('allocations', {}).get('pods', 0)
    yield 0, 'Pods: %d' % pods, [('k8s_pods', pods)]

    allocatable = parsed.get('allocatable', {}).get('pods', 0)
    yield 0, 'Allocatable: %d' % allocatable, [('k8s_pods_allocatable', allocatable)]

    capacity = parsed.get('capacity', {}).get('pods', 0)
    yield 0, 'Capacity: %d' % capacity, [('k8s_pods_capacity', capacity)]

    if allocatable:
        usage = 100.0 * pods / allocatable
        yield check_levels(
            usage,
            'k8s_pods_usage',
            params.get('pods'),
            infoname='Usage',
            human_readable_func=get_percent_human_readable)


check_info['k8s_resources.pods'] = {
    'inventory_function': get_k8s_resources_inventory_function('pods'),
    'check_function': check_k8s_pod_resources,
    'service_description': 'Pod resources',
    'has_perfdata': True,
    'group': 'k8s_resources',
}


def check_k8s_cpu_resources(_no_item, params, parsed):
    request = parsed.get('requests', {}).get('cpu', 0.0)
    yield 0, 'Request: %.3f' % request, [('k8s_cpu_request', request)]

    limit = parsed.get('limits', {}).get('cpu')
    if math.isinf(limit):
        yield 0, 'Limit: n.a.'
    else:
        yield 0, 'Limit: %.3f' % limit, [('k8s_cpu_limit', limit)]

    allocatable = parsed.get('allocatable', {}).get('cpu', 0.0)
    yield 0, 'Allocatable: %.3f' % allocatable, [('k8s_cpu_allocatable', allocatable)]

    capacity = parsed.get('capacity', {}).get('cpu', 0.0)
    yield 0, 'Capacity: %.3f' % capacity, [('k8s_cpu_capacity', capacity)]

    if allocatable:
        usage = 100.0 * request / allocatable
        yield check_levels(
            usage,
            'k8s_cpu_usage',
            params.get('cpu'),
            infoname='Usage',
            human_readable_func=get_percent_human_readable)


check_info['k8s_resources.cpu'] = {
    'inventory_function': get_k8s_resources_inventory_function('cpu'),
    'check_function': check_k8s_cpu_resources,
    'service_description': 'CPU resources',
    'has_perfdata': True,
    'group': 'k8s_resources',
}


def check_k8s_mem_resources(_no_item, params, parsed):
    request = parsed.get('requests', {}).get('memory', 0.0)
    yield 0, 'Request: %s' % get_bytes_human_readable(request), [('k8s_memory_request', request)]

    limit = parsed.get('limits', {}).get('memory')
    if math.isinf(limit):
        yield 0, 'Limit: n.a.'
    else:
        yield 0, 'Limit: %s' % get_bytes_human_readable(limit), [('k8s_memory_limit', limit)]

    allocatable = parsed.get('allocatable', {}).get('memory', 0.0)
    yield 0, 'Allocatable: %s' % get_bytes_human_readable(allocatable), [('k8s_memory_allocatable',
                                                                          allocatable)]

    capacity = parsed.get('capacity', {}).get('memory', 0.0)
    yield 0, 'Capacity: %s' % get_bytes_human_readable(capacity), [('k8s_memory_capacity',
                                                                    capacity)]

    if allocatable:
        usage = 100.0 * request / allocatable
        yield check_levels(
            usage,
            'k8s_memory_usage',
            params.get('memory'),
            infoname='Usage',
            human_readable_func=get_percent_human_readable)


check_info['k8s_resources.memory'] = {
    'inventory_function': get_k8s_resources_inventory_function('memory'),
    'check_function': check_k8s_mem_resources,
    'service_description': 'Memory resources',
    'has_perfdata': True,
    'group': 'k8s_resources',
}
