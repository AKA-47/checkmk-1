#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.plugins.agent_based.utils import postgres

# <<<postgres_query_duration>>>
# [databases_start]
# postgres
# testdb
# datenbank
# [databases_end]
# datname;datid;usename;client_addr;state;seconds;pid;current_query
# postgres;12068;postgres;;active;0;12631;SELECT datname, datid, usename, ....

# instance
# <<<postgres_query_duration>>>
# [[[foobar]]]
# [databases_start]
# postgres
# testdb
# [databases_end]
# ...


def discover_postgres_query_duration(section: postgres.Section):
    for item in section:
        yield item, {}


def check_postgres_query_duration(item: str, _no_params, section: postgres.Section):
    data = section.get(item)
    if data is None:
        # In case of missing information we assume that the login into
        # the database has failed and we simply skip this check. It won't
        # switch to UNKNOWN, but will get stale.
        raise MKCounterWrapped("Login into database failed")

    if not data:
        yield 0, "No queries running"
        return

    query = max(data, key=lambda q: int(q["seconds"]))

    yield 0, f"Longest query: {query['seconds']} seconds"

    if query["usename"]:
        yield 0, f"Username: {query['usename']}"

    if query["client_addr"]:
        yield 0, f"Client: {query['client_addr']}"

    if query["state"].lower() != "active":
        yield 0, f"Query state: {query['state']}"

    yield 0, f"PID: {query['pid']}"
    yield 0, f"Query: {query['current_query']}"


check_info['postgres_query_duration'] = {
    "parse_function": postgres.parse_dbs,
    "check_function": check_postgres_query_duration,
    "inventory_function": discover_postgres_query_duration,
    "service_description": "PostgreSQL Query Duration %s",
}
