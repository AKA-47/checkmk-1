#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_blade_blades(info):
    map_states = {
        'exist_state'  : ((2, "no"), (0, "yes")),
        'power_state'  : ((1, "off"), (0, "on")),
        'health_state' : ((3, "unknown"), (0, "good"), (1, "warning"), (2, "bad")),
    }

    parsed = {}
    for line in info:
        parsed[line[0]] = [
            map_states['exist_state'][int(line[1])],
            map_states['power_state'][int(line[2])],
            map_states['health_state'][int(line[3])],
            line[4]
        ]

    return parsed

def inventory_blade_blades(parsed):
    for key, value in parsed.iteritems():
        if not parsed[key][1][1] == "off": # Only inventory powered on blades
            yield (key, None)

def check_blade_blades(item, _no_params, parsed):
    for key, values in parsed.iteritems():
        if item == key:
            # name
            yield 0, values[3]
            # exist_state
            yield values[0][0], "Exists: %s" % values[0][1]
            # power_state
            yield values[1][0], "Power: %s" % values[1][1]
            # health_state
            yield values[2][0], "Health: %s" % values[2][1]


check_info["blade_blades"] = {
    'parse_function'        : parse_blade_blades,
    'inventory_function'    : inventory_blade_blades,
    'check_function'        : check_blade_blades,
    'service_description'   : "Blade %s",
    'snmp_info'             : (".1.3.6.1.4.1.2.3.51.2.22.1.5.1.1", [ # BLADE-MIB
                                                2, # bladeId
                                                3, # bladeExists
                                                4, # bladePowerState
                                                5, # bladeHealthState
                                                6, # bladeName
                              ]),
    'snmp_scan_function'    : lambda oid: re.match('(BladeCenter|BladeCenter Advanced|IBM Flex Chassis) Management Module', \
                                oid(".1.3.6.1.2.1.1.1.0")) != None,
}
