#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# First generation of agents output only the process command line:
# /usr/sbin/xinetd -pidfile /var/run/xinetd.pid -stayalive -inetd_compat -inetd_ipv6

# Second generation of agents output the user in brackets in the first columns:
# (root) /usr/sbin/xinetd -pidfile /var/run/xinetd.pid -stayalive -inetd_compat -inetd_ipv6

# Third generation (from 1.1.5) output also virtual memory, resident memory and %CPU:
# (class,122376,88128,0.0) /usr/jre1.6.0_13/bin/java -Dn=Cart_16TH13 -Dmcs.node=zbgh1ca -Dmcs.mdt.redundan

# Forth generation (>=1.2.5), additional columns in bracket:
# (user, virtual_size, resident_size, %cpu, processID, pagefile_usage, usermodetime, kernelmodetime, openHandles, threadCount) name
# (\\KLAPPRECHNER\ab,29284,2948,0,3124,904,400576,901296,35,1)    NOTEPAD.EXE

# Sixth generation (>=1.2.7) adds an optional etime, joined by "/" with the CPU time

# The plugin "psperf.bat" is deprecated. As of version 1.2.5 all of this information
# is reported by the windows agent itself. However, we still support sections from psperf.bat
# if the agent version is lower than 1.2.5.
# Windows agent now ships a plugin "psperf.bat" that adds a section from wmic
# to the output:
# <<<ps:sep(44)>>>
# [wmic process]
# ^M
# Node,KernelModeTime,Name,PageFileUsage,ThreadCount,UserModeTime,VirtualSize,WorkingSetSize^M
# WINDOWSXP,43478281250,System Idle Process,0,2,0,0,28672^M
# WINDOWSXP,155781250,System,0,59,0,1957888,253952^M
# WINDOWSXP,468750,smss.exe,176128,3,156250,3928064,442368^M
# WINDOWSXP,56406250,csrss.exe,1863680,12,11406250,25780224,3956736^M
# WINDOWSXP,18593750,winlogon.exe,6832128,19,4843750,59314176,2686976^M
# WINDOWSXP,167500000,services.exe,1765376,16,13750000,22601728,4444160^M
# WINDOWSXP,16875000,lsass.exe,3964928,21,3906250,43462656,6647808^M
# WINDOWSXP,8750000,VBoxService.exe,1056768,8,468750,26652672,3342336^M

# New since 1.2.1i2: WATO compatible syntax
#
# Holds a list of rules which are matching hosts by names or tags and
# where each rule holds a dictionary.
#
# Each of those entries defines the following options:
#
# 1. descr:    item name to be used for the service description
# 2. match:    matching-definition
# 3. user:     user definition
# 5. perfdata: monitor with perfdata
# 4. levels:   four numbers (thresholds)
inventory_processes_rules = []


def ps_cleanup_counters(parsed):
    # remove legacy key used for some kind of caching
    cleanup_idents = ["last.cleared.ps_"]

    pids = ps_get_current_pids(parsed)
    cleanup_idents += ps_get_counters_to_delete(pids)

    # Avoid growing up the item state with info about processes that aren't
    # executing anymore. Clean all information about process that are not
    # the ones specifically inside the current parsed agent output
    clear_item_states_by_full_keys(cleanup_idents)


# Get the idents of the counters which can be deleted because the process id of
# the counter is not found anymore in the process table.
#
# Handle these formats of idents:
# Old string based keys: 'ps_stat.pcpu.669': (1448634267.875281, 1),
# New magic keys:        ('ps', None, 'ps_wmic.kernel.692'): (1448633487.573496, 1092007),
def ps_get_counters_to_delete(pids):
    counters_to_delete = []
    for ident in get_all_item_states():
        if isinstance(ident, tuple) and ident[0] in ["ps", "ps.perf"]:
            check_ident = ident[2]
        elif not isinstance(ident, tuple) and (ident.startswith("ps_stat") or
                                               ident.startswith("ps_wmic")):
            check_ident = ident
        else:
            continue

        pid = check_ident.split(".")[-1]
        if pid.isdigit() and pid not in pids:
            counters_to_delete.append(ident)

    return counters_to_delete


def ps_get_current_pids(parsed):
    pids = set()
    for line in parsed:
        process_info = line[1]
        if process_info.process_id:
            pids.add(process_info.process_id)
    return pids


def inventory_ps(parsed_extra):
    section_ps = parsed_extra[0]
    if section_ps is None:
        return
    _cpu_cores, data = section_ps
    params = host_extra_conf(host_name(), inventory_processes_rules)
    # bring back node info for now
    return inventory_ps_common(params, [[None] + line for line in data])


def check_ps(item, params, parsed_extra):
    parsed = parsed_extra[0]
    if not parsed:
        return

    # in the cluster case, this does not really make sense.
    # see if we can fix this upon migration
    cpu_cores, lines = parsed
    # bring back node info for now
    node = None  # TODO: this can be done properly when migrating!
    parsed = [[node] + line for line in lines]

    # Cleanup counters of processes which do not exist anymore
    ps_cleanup_counters(parsed)

    mem_info, solaris_mem_info, statgrab_mem_info, aix_memory_info, cpu_info = parsed_extra[1:]

    # cpu_info for non windows systems
    if cpu_info and len(cpu_info[0]) == 6:
        cpu_cores = int(cpu_info[0][5])

    if mem_info:
        total_ram = parse_proc_meminfo_bytes(mem_info).get("MemTotal")
    elif solaris_mem_info:
        total_ram = solaris_mem_info.get("MemTotal") * 1024
    elif statgrab_mem_info:
        total_ram = statgrab_mem_info.get("MemTotal") * 1024
    elif aix_memory_info:
        total_ram = int(aix_memory_info[0][0]) * 4 * 1024
    else:
        total_ram = None

    return check_ps_common(item, params, parsed, cpu_cores=cpu_cores, total_ram=total_ram)


check_info['ps'] = {
    "inventory_function": inventory_ps,
    "check_function": check_ps,
    "service_description": "Process %s",
    "includes": ["ps_lnx.include", "ps.include", "mem.include"],
    "has_perfdata": True,
    "node_info": True,  # add first column with actual host name
    "group": "ps",
    "default_levels_variable": "ps_default_levels",
    "extra_sections": ["mem", "solaris_mem", "statgrab_mem", "aix_memory", "cpu"],
}

# NOTE: This check is deprecated and will be removed any decade now. ps now
# does always performance data.
check_info['ps.perf'] = {
    "check_function": check_ps,
    "service_description": "Process %s",
    "includes": ["ps_lnx.include", "ps.include", "mem.include"],
    "has_perfdata": True,
    "node_info": True,  # add first column with actual host name
    "group": "ps",
    "default_levels_variable": "ps_default_levels",
    "extra_sections": ["mem", "solaris_mem", "statgrab_mem", "aix_memory", "cpu"],
}
