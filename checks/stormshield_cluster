#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2017             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# example output


def inventory_stormshield_cluster(info):
    return [ (None, None) ]


def check_stormshield_cluster(_no_item, params, info):
    data = info[0][0]

    nodes           = int(data[0])
    dead_nodes      = int(data[1])
    active_nodes    = int(data[2])
    links           = int(data[3])
    faulty_links    = int(data[4])

    yield 0, "Cluster nodes: %d, HA links: %d" % (nodes, links)

    if dead_nodes > 0:
        yield 2, "Dead Nodes: %s" % dead_nodes
    if faulty_links > 0:
        yield 2, "Faulty HA links: %s" % faulty_links


check_info['stormshield_cluster'] = {
    'inventory_function'    : inventory_stormshield_cluster,
    'check_function'        : check_stormshield_cluster,
    'service_description'   : 'Cluster status',
    'snmp_info'             : [ ('.1.3.6.1.4.1.11256.1.11', [
                                    "1", # STORMSHIELD-HA-MIB::snsNbNode
                                    "2", # STORMSHIELD-HA-MIB::snsNbDeadNode
                                    "3", # STORMSHIELD-HA-MIB::snsNbActiveNode
                                    "5", # STORMSHIELD-HA-MIB::snsNbHALinks
                                    "6", # STORMSHIELD-HA-MIB::snsNbFaultyHALinks
                                ]),
                                ('.1.3.6.1.4.1.11256.1.11.7.1', [
                                    "3", # STORMSHIELD-HA-MIB::snsOnline
                                    "4", # STORMSHIELD-HA-MIB::snsModel
                                    "5", # STORMSHIELD-HA-MIB::snsVersion
                                    "2", # STORMSHIELD-HA-MIB::snsFwSerial
                                    "6", # STORMSHIELD-HA-MIB::snsHALicence
                                    "10", # STORMSHIELD-HA-MIB::snsHAActive
                                ]),
                                ('.1.3.6.1.4.1.11256.1.0', [
                                    "3", # STORMSHIELD-PROPERTY-MIB::snsSerialNumber
                                ]),
                              ],
    'snmp_scan_function'    : stormshield_scan_function,
    'includes'              : [ 'stormshield.include' ]
}

# This option is useful even if it has been implement for other reasons...

factory_settings["cisco_asa_failover_default_levels"] = {
            "primary"           : "active",
            "secondary"         : "standby",
            "failover_state"    : 0,
}


def inventory_stormshield_cluster_node(info):
    return [ (None, None) ]


def check_stormshield_cluster_node(_no_item, params, info):
    node_role = {
        "1"      : "active",
        "2"      : "standby",
        "master" : "primary",
        "slave"  : "secondary",
    }
    node_status = {
        "1" : (0, "true"),
        "2" : (2, "false"),
    }
    serial = info[2][0][0]
    data = info[1]
    for line in data:
        if line[3] == serial:
            data = line
    if not len(data) == 6:
        yield 3, "No information available"
    else:
        state, state_readable = node_status[data[0]]
        yield state, "Online: %s" % state_readable

        role = data[4]
        role_state = node_role[data[5]]
        yield 0, "Model: %s, Version: %s, Serial: %s, Role: %s/%s" % \
                 (data[1], data[2], data[3], role, role_state)

        # Master should be active and slave passive. We check this but
        # do not alert by default. See factory settings.
        translated_role = node_role[role.lower()]
        if not translated_role == role_state:
            yield params['failover_state'], \
                  "(The %s should be %s)" % (role, params[translated_role])


check_info['stormshield_cluster.node'] = {
    'inventory_function'        : inventory_stormshield_cluster_node,
    'check_function'            : check_stormshield_cluster_node,
    'service_description'       : 'Node Status',
    'group'                     : 'cisco_asa_failover',
    "default_levels_variable"   : "cisco_asa_failover_default_levels",
}
