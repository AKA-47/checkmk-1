#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_aws_s3(info):
    parsed = {}
    for row in parse_aws(info):
        parsed.setdefault(row['Name'], row)
    return parsed


def _extract_aws_s3_tags(metrics):
    # metrics is dict with key 'Tagging'
    return ", ".join(
        ["%s: %s" % (pair['Key'], pair['Value']) for pair in metrics.get('Tagging', [])])


#   .--summary-------------------------------------------------------------.
#   |                                                                      |
#   |           ___ _   _ _ __ ___  _ __ ___   __ _ _ __ _   _             |
#   |          / __| | | | '_ ` _ \| '_ ` _ \ / _` | '__| | | |            |
#   |          \__ \ |_| | | | | | | | | | | | (_| | |  | |_| |            |
#   |          |___/\__,_|_| |_| |_|_| |_| |_|\__,_|_|   \__, |            |
#   |                                                    |___/             |
#   '----------------------------------------------------------------------'


def check_aws_s3_summary(item, params, parsed):
    yield 0, '%s buckets' % len(parsed)
    buckets_by_region = {}
    long_output = []
    for bucket_name, row in parsed.iteritems():
        region = row['LocationConstraint']
        if not region:
            region = "unknown"

        buckets_by_region.setdefault(region, []).append(row)
        long_output_info = ["Bucket: %s, Region: %s" % (bucket_name, region)]
        tags = _extract_aws_s3_tags(row)
        if tags:
            long_output_info.append("[Tags] %s" % tags)
        long_output.append(", ".join(long_output_info))

    for region, buckets in buckets_by_region.iteritems():
        region_readable = AWSRegions.get(region, 'unknown[%s]' % region)
        yield 0, "%s: %s" % (region_readable, len(buckets))

    if long_output:
        yield 0, '\n%s' % '\n'.join(long_output)


check_info['aws_s3_summary'] = {
    'parse_function': parse_aws_s3,
    'inventory_function': discover_single,
    'check_function': check_aws_s3_summary,
    'service_description': 'AWS/S3 Summary',
    'includes': ['aws.include'],
}

#.
#   .--objects-------------------------------------------------------------.
#   |                         _     _           _                          |
#   |                    ___ | |__ (_) ___  ___| |_ ___                    |
#   |                   / _ \| '_ \| |/ _ \/ __| __/ __|                   |
#   |                  | (_) | |_) | |  __/ (__| |_\__ \                   |
#   |                   \___/|_.__// |\___|\___|\__|___/                   |
#   |                            |__/                                      |
#   '----------------------------------------------------------------------'


@get_parsed_item_data
def check_aws_s3_summary_objects(item, params, metrics):
    sum_size = 0
    num_objects = 0
    largest = None
    largest_size = 0
    for row in metrics.get('Contents', []):
        size = row['Size']
        sum_size += row['Size']
        num_objects += 1
        if size >= largest_size:
            largest = row['Key']
            largest_size = size
    yield 0, 'Bucket size: %s' % get_bytes_human_readable(sum_size)
    yield 0, 'Number of objects: %s' % num_objects
    if largest:
        yield 0, 'Largest object: %s, %s' % (largest, get_bytes_human_readable(largest_size))


check_info['aws_s3_summary.objects'] = {
    'inventory_function': discover(),
    'check_function': check_aws_s3_summary_objects,
    'service_description': 'AWS/S3 Objects %s',
}
