#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2017             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def preparse_emcvnx_info(info):
    def convert(value):
        try:
            return int(value)
        except ValueError:
            try:
                return float(value)
            except ValueError:
                pass
        return value

    preparsed, errors, skip_lines = [], set(), 0
    for line in info:
        line = [x.strip() for x in line]
        if len(line) == 1:
            key, value = line[0], None
        else:
            # the value can contain the separator ':'
            key, value = line[0], ':'.join(line[1:])

        # fix naviseccli error that does not output a colon for some values
        if value is None and (key.startswith('SP Read Cache State') or
                              key.startswith('SP Write Cache State')):
            tmp = key.split()
            key, value = ' '.join(tmp[:-1]), tmp[-1]

        if key.startswith('Error'):
            skip_lines, error = 1, []
        elif key.startswith('Unable to validate the identity of the server'):
            # assumes that certificate errors are always 10 lines long
            skip_lines, error = 10, []

        if not skip_lines:
            if key.startswith('---'):  # remove headline
                preparsed.pop()
                continue
            elif value is None:  # append in case of a line continuation
                value = key
                old_key, old_value = preparsed[-1]
                preparsed[-1] = (old_key, ', '.join([old_value, value]))
            elif not value:  # remove subheader
                continue
            else:
                preparsed.append((key, convert(value)))
        else:
            error.append(': '.join(line))

            if skip_lines == 1:
                errors.add(' '.join(error))
            skip_lines -= 1

    return preparsed, list(errors)
