#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def inventory_aws_ec2_summary(parsed):
    if parsed:
        return [(None, {})]


def _extract_aws_ec2_security_groups(metrics):
    # metrics is dict with key 'SecurityGroups'
    return ", ".join([
        "%s: %s" % (pair['GroupId'], pair['GroupName'])
        for pair in metrics.get('SecurityGroups', [])
    ])


def _extract_aws_ec2_tags(metrics):
    # metrics is dict with key 'Tags'
    return ", ".join(["%s: %s" % (pair['Key'], pair['Value']) for pair in metrics.get('Tags', [])])


def check_aws_ec2_summary(item, params, parsed):
    instances_by_state = {}
    long_output = []
    for reservation in parsed:
        for instance in reservation['Instances']:
            instance_id = instance['InstanceId']
            instance_state = instance['State']['Name']
            instances_by_state.setdefault(instance_state, []).append(instance_id)

            long_output_info = ["Instance: %s, Status: %s" % (instance_id, instance_state)]
            security_groups = _extract_aws_ec2_security_groups(instance)
            if security_groups:
                long_output_info.append("[Security groups] %s" % security_groups)
            tags = _extract_aws_ec2_tags(instance)
            if tags:
                long_output_info.append("[Tags] %s" % tags)
            long_output.append(", ".join(long_output_info))

    yield 0, "Instances: %s" % sum([len(v) for v in instances_by_state.itervalues()])
    for instance_state, instances in instances_by_state.iteritems():
        if instance_state == 'running':
            state = 0
        else:
            state = 1
        yield state, "%s: %s" % (instance_state, len(instances))

    if long_output:
        yield 0, "\n%s" % "\n".join(long_output)


check_info['aws_ec2_summary'] = {
    'parse_function': parse_aws,
    'inventory_function': inventory_aws_ec2_summary,
    'check_function': check_aws_ec2_summary,
    'service_description': 'AWS/EC2 Summary',
    'includes': ['aws.include'],
}
