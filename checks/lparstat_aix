#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# +------------------------------------------------------------------+
# | This file has been contributed and is copyrighted by:            |
# |                                                                  |
# | Joerg Linge 2009 <joerg.linge@pnp4nagios.org>     Copyright 2010 |
# +------------------------------------------------------------------+

# %user  %sys  %wait  %idle physc %entc  lbusy   app  vcsw phint
# -----  ----  -----  ----- ----- ----- ------   ---  ---- -----
#   2.5   6.0    0.1   91.5  0.03  11.4    1.8  3.27 1976647217 490545630

# %user  %sys  %wait  %idle physc %entc  lbusy  vcsw phint  %nsp  %utcyc
# ----- ----- ------ ------ ----- ----- ------ ----- ----- -----  ------
#   0.2   0.4    0.0   99.3  0.02   1.7    0.0   215     3   101   0.64

# %user  %sys  %wait  %idle physc %entc  lbusy   app  vcsw phint  %nsp  %utcyc
# ----- ----- ------ ------ ----- ----- ------   --- ----- ----- -----  ------
#   0.1   0.4    0.0   99.5  0.02   1.6    0.0  3.97   297     0   101   0.64

# %user  %sys  %wait  %idle physc %entc  lbusy  vcsw phint  %nsp
# ----- ----- ------ ------ ----- ----- ------ ----- ----- -----
#   0.1   0.2    0.0   99.6  0.04   1.8    2.3   371     0    58

lparstat_default_levels = (5, 10)


def parse_lparstat_aix(info):
    if not info:
        return {}
    if len(info) < 4:
        return {'update_required': True}

    parsed = {}
    for index, key in enumerate(info[1]):
        name = key.lstrip('%')
        uom = '%' if '%' in key else ''
        try:
            value = float(info[3][index])
        except (IndexError, ValueError):
            continue

        if name in ('user', 'sys', 'idle', 'wait'):
            parsed.setdefault('cpu', {})[name] = value
        else:
            parsed.setdefault('util', []).append((name, value, uom))

    return parsed


def inventory_lparstat(parsed):
    if parsed:
        yield None, "lparstat_default_levels"


def check_lparstat(_no_item, _no_params, parsed):
    if not parsed:
        return
    if parsed.get('update_required'):
        yield 3, "Please upgrade your AIX agent."
        return

    utilization = parsed.get('util', [])
    for name, value, uom in utilization:
        yield 0, "%s: %s%s" % (name.title(), value, uom), [(name, value)]


check_info["lparstat_aix"] = {
    'parse_function': parse_lparstat_aix,
    'check_function': check_lparstat,
    'inventory_function': inventory_lparstat,
    'service_description': 'lparstat',
    'has_perfdata': True,
}

# Utilization and IO/Wait
kernel_util_default_levels = None


def inventory_lparstat_aix_cpu(parsed):
    if parsed.get('cpu') or parsed.get('update_required'):
        yield None, "kernel_util_default_levels"


def check_lparstat_aix_cpu(_no_item, params, parsed):
    if parsed.get('update_required'):
        yield 3, "Please upgrade your AIX agent."
        return

    cpu = parsed.get('cpu', {})
    user, system, wait = cpu.get('user'), cpu.get('sys'), cpu.get('wait')
    if None in (user, system, wait):
        return

    perfdata = [("user", user), ("system", system), ("wait", wait)]

    util = user + system + wait

    infotext = "user: %2.1f%%, system: %2.1f%%, wait: %2.1f%%" % (user, system, wait)

    # You may set a warning/critical level on the io wait
    # percentage. This can be done by setting params to
    # a pair of (warn, crit)
    params = transform_cpu_iowait(params)
    result = 0

    if isinstance(params.get('util'), tuple):
        warn, crit = params['util']
        if util >= crit:
            result = max(result, 2)
        elif util >= warn:
            result = max(result, 1)
    if 'iowait' in params:
        warn, crit = params['iowait']
        if wait >= crit:
            result = max(result, 2)
        elif wait >= warn:
            result = max(result, 1)

    yield result, infotext, perfdata


check_info['lparstat_aix.cpu_util'] = {
    "check_function": check_lparstat_aix_cpu,
    "inventory_function": inventory_lparstat_aix_cpu,
    "service_description": "CPU utilization",
    "has_perfdata": True,
    "group": "cpu_iowait",
    'includes': ['transforms.include'],
}
