#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# In cooperation with Thorsten Bruhns from OPITZ Consulting

# <<<oracle_undostat>>>
# TUX2 160 0 1081 300 0

factory_settings["oracle_undostat_defaults"] = {
    "levels": (600, 300),
    "nospaceerrcnt_state": 2,
}


def parse_oracle_undostat(info):
    return {line[0]: [int(v) for v in line[1:]] for line in info if len(line) == 6}


def discover_oracle_undostat(parsed):
    return [(item, {}) for item in parsed]


def check_oracle_undostat(item, params, parsed):

    data = parsed.get(item)
    if data is None:
        # In case of missing information we assume that the login into
        # the database has failed and we simply skip this check. It won't
        # switch to UNKNOWN, but will get stale.
        raise MKCounterWrapped("Login into database failed")

    activeblks, maxconcurrency, tuned_undoretention, maxquerylen, nospaceerrcnt = data
    warn, crit = params["levels"]

    state, infotext, _no_perf = check_levels(
        tuned_undoretention,
        None,
        params=None if tuned_undoretention == -1 else (None, None, warn, crit),
        human_readable_func=get_age_human_readable,
        infoname="Undo retention",
    )

    if tuned_undoretention >= 0:
        infotext += ", Active undo blocks: %d" % activeblks

    nospaceerrcntpic = ""
    if nospaceerrcnt:
        state_errcnt = params['nospaceerrcnt_state']
        state = max(state, state_errcnt)
        if state_errcnt == 1:
            nospaceerrcntpic = "(!)"
        elif state_errcnt == 2:
            nospaceerrcntpic = "(!!)"
        elif state_errcnt == 3:
            nospaceerrcntpic = "(?)"

    infotext += ", Max concurrent transactions: %d, Max querylen: %s, Space errors: %d%s" % (
        maxconcurrency,
        get_age_human_readable(maxquerylen),
        nospaceerrcnt,
        nospaceerrcntpic,
    )

    perfdata = [
        ('activeblk', activeblks),
        ('transconcurrent', maxconcurrency),
        # lower levels are unorthodox here (at least), but we keep it for compatibility (for now)
        ('tunedretention', tuned_undoretention, warn, crit),
        ('querylen', maxquerylen),
        ('nonspaceerrcount', nospaceerrcnt),
    ]

    return state, infotext, perfdata


check_info['oracle_undostat'] = {
    "parse_function": parse_oracle_undostat,
    "check_function": check_oracle_undostat,
    "inventory_function": discover_oracle_undostat,
    "service_description": "ORA %s Undo Retention",
    "has_perfdata": True,
    "default_levels_variable": "oracle_undostat_defaults",
    "group": "oracle_undostat",
}
