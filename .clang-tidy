---
# Classification of the excludes:
#
#   * unclear, need to figure out if we want that:
#       * cert-err58-cpp ("construction of 'foo' with static storage duration may throw an exception that cannot be caught")
#       * cppcoreguidelines-pro-bounds-array-to-pointer-decay ("do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead")
#       * cppcoreguidelines-pro-bounds-constant-array-index ("do not use array subscript when the index is not an integer constant expression; use gsl::at() instead")
#       * cppcoreguidelines-pro-bounds-pointer-arithmetic ("do not use pointer arithmetic")
#       * google-runtime-int ("consider replacing 'unsigned long' with 'uint64'")
#
#   * undesirable checks:
#       * cppcoreguidelines-pro-type-static-cast-downcast ("do not use static_cast to downcast from a base to a derived class; use dynamic_cast instead")
#       * google-runtime-references ("non-const reference parameter 'foo', make it const or use a pointer")
#       * hicpp-no-assembler ("do not use inline assembler in safety-critical code") triggered by ntohs/htons
#       * llvm-include-order ("#includes are not sorted properly")
#
#   * desirable checks, but hard to fix currently:
#       * android-cloexec-fopen ("use 'fopen' mode 'e' to set O_CLOEXEC") Ancient CentOS 5 doesn't have O_CLOEXEC
#       * android-cloexec-open ("'open' should use O_CLOEXEC where possible") Ancient CentOS 5 doesn't have O_CLOEXEC
#       * cert-env33-c ("calling 'system' uses a command processor")
#       * cert-err34-c ("'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead")
#       * cppcoreguidelines-pro-type-member-init ("uninitialized record type: 'foo'")
#       * cppcoreguidelines-pro-type-reinterpret-cast ("do not use reinterpret_cast")
#       * cppcoreguidelines-pro-type-vararg ("do not call c-style vararg functions")
#       * hicpp-member-init: alias for cppcoreguidelines-pro-type-member-init
#       * llvm-header-guard ("header guard does not follow preferred style") tricky to get right with the current bear/clang-tidy/symlink situation
#
#   * desirable checks, but some places need to be suppressed:
#       * cppcoreguidelines-pro-type-const-cast ("do not use const_cast")
#       * cppcoreguidelines-pro-type-union-access ("do not access members of unions; use (boost::)variant instead")
#       * modernize-use-bool-literals ("converting integer literal to bool, use bool literal instead") Incorrectly triggered by e.g. FD_ZERO
#
#   * temporarily disabled:
#       * clang-analyzer-optin.performance.Padding
#       * cppcoreguidelines-special-member-functions
#       * hicpp-special-member-functions
#       * modernize-pass-by-value
#       * modernize-use-default-member-init
#       * performance-unnecessary-value-param
#
Checks: '*,-android-cloexec-fopen,-android-cloexec-open,-cert-env33-c,-cert-err34-c,-cert-err58-cpp,-clang-analyzer-alpha*,-cppcoreguidelines-pro-bounds-array-to-pointer-decay,-cppcoreguidelines-pro-bounds-constant-array-index,-cppcoreguidelines-pro-bounds-pointer-arithmetic,-cppcoreguidelines-pro-type-const-cast,-cppcoreguidelines-pro-type-member-init,-cppcoreguidelines-pro-type-reinterpret-cast,-cppcoreguidelines-pro-type-static-cast-downcast,-cppcoreguidelines-pro-type-union-access,-cppcoreguidelines-pro-type-vararg,-google-runtime-int,-google-runtime-references,-hicpp-member-init,-hicpp-no-assembler,-llvm-header-guard,-llvm-include-order,-modernize-use-bool-literals,-clang-analyzer-optin.performance.Padding,-cppcoreguidelines-special-member-functions,-hicpp-special-member-functions,-modernize-pass-by-value,-modernize-use-default-member-init,-performance-unnecessary-value-param'
CheckOptions:
  - key:             google-readability-namespace-comments.SpacesBeforeComments
    value:           '1'
...
