#!/bin/bash
# The script builds Windows agent within a chroot jail.
#
# Options:
#          -jN  where N is the number of parallel build jobs
#          (for usage, see 'man make'). Default: half of available CPU cores.
# Parameters:
#          Possible make targets. By default, a parallel build and
#          install-strip (non-debug) is done and an msi installer produced.

set -e

. build.sh
parse-args "$@"

chroot_dependencies=(debootstrap debian-archive-keyring)
versionfile=chroot_version

base="$(realpath ../..)"

# May be set from external environment. Otherwise use chroot
# directory in agents/windows
export CHROOT_PATH=${CHROOT_PATH:-$base/agents/windows/chroot}
export CHROOT_BUILD_DIR=${CHROOT_BUILD_DIR:-build}

if [ ! -f "$base/agents/windows/$versionfile" ] ; then
    echo "Error: File $base/agents/windows/$versionfile not found."
    echo "Is your Git repository up to date?"
    exit 1
fi

# Ensure that chroot exists and is up to date:
# ensure that versionfile exists...
if [ ! -f "$CHROOT_PATH/$versionfile" ] ; then
    echo "chroot version not found."
    create=yes
    #  ... and it is up to date.
elif [ $(cat "$CHROOT_PATH/$versionfile") -ne \
       $(cat "$base/agents/windows/$versionfile") ] ; then
    echo "chroot is out of date."
    create=yes
fi

if [ -z $create ] ; then
    echo "chroot is up to date."
else
    apt-get -y install "${chroot_dependencies[@]}"
    VERSIONFILE=$versionfile CHROOT_PATH=$CHROOT_PATH \
        CHROOT_BUILD_DIR=$CHROOT_BUILD_DIR ./make-chroot
fi

# Build the Windows agent within chroot by calling the 'build-agent' script as
# $SUDO_USER.
CHROOT_PATH=$CHROOT_PATH CHROOT_BUILD_DIR=$CHROOT_BUILD_DIR \
    NEW_VERSION=$NEW_VERSION ./do-chroot \
    "/bin/su - $SUDO_USER -m -c '$CHROOT_BUILD_DIR/agents/windows/build-agent -j${njobs} $targets'"
EXIT_CODE=$?

exit $EXIT_CODE
