#!/bin/bash
# The script builds Windows agent within a chroot jail.
#
# Options:
#          -jN  where N is the number of parallel build jobs
#          (for usage, see 'man make'). Default: half of available CPU cores.
# Parameters:
#          Possible make targets. By default, a parallel build and
#          install-strip (non-debug) is done and an msi installer produced.

while getopts "j:" arg ; do
    case $arg in
        j)
            njobs=${OPTARG}
            ;;
        *)
            exit 1
            ;;
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift
targets="$@" # no parameter -> default make target
chroot_dependencies=(debootstrap debian-archive-keyring)
versionfile=chroot_version

base="$(dirname "$(dirname "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)")")"

# May be set from external environment. Otherwise use chroot
# directory in agents/windows
export CHROOT_PATH=${CHROOT_PATH:-$base/agents/windows/chroot}
export CHROOT_BUILD_DIR=${CHROOT_BUILD_DIR:-build}

if [ ! -f "$base/agents/windows/$versionfile" ] ; then
    echo "Error: File $base/agents/windows/$versionfile not found."
    echo "Is your Git repository up to date?"
    exit 1
fi

# Ensure that chroot exists and is up to date:
# ensure that versionfile exists...
if [ ! -f "$CHROOT_PATH/$versionfile" ] ; then
    echo "chroot version not found."
    create=yes
    #  ... and it is up to date.
elif [ $(cat "$CHROOT_PATH/$versionfile") -ne \
       $(cat "$base/agents/windows/$versionfile") ] ; then
    echo "chroot is out of date."
    create=yes
fi

if [ -z $create ] ; then
    echo "chroot is up to date."
else
    sudo apt-get -y install "${chroot_dependencies[@]}" 
    sudo VERSIONFILE=$versionfile CHROOT_PATH=$CHROOT_PATH ./make-chroot
fi

# If njobs is not set, use half of available CPU cores.
[[ -n $njobs ]] || njobs=$(($(grep -c processor /proc/cpuinfo)/2))
[[ $njobs -le 0 ]] && njobs=1 # Ensure one core after arithmetic division.

# Build the Windows agent within chroot by calling the 'build-agent' script.
sudo CHROOT_PATH=$CHROOT_PATH CHROOT_BUILD_DIR=$CHROOT_BUILD_DIR ./do-chroot \
     "$CHROOT_BUILD_DIR/agents/windows/build-agent -j${njobs} $targets"

# Some cleanup: chown build artifacts to the original user.
find . -maxdepth 1 -regextype egrep \
-regex '(.*\.(exe|msi|m4))|.*\/build.*|.*build_version|.*plugins|.*msibuild|.*Makefile.*|.*configure' \
-exec sudo chown -R $USER:$USER {} \;
