#!/bin/bash
# The script builds Windows agent within a chroot jail.
#
# Options:
#          -jN  where N is the number of parallel build jobs
#          (for usage, see 'man make'). Default: half of available CPU cores.
# Parameters:
#          Possible make targets. By default, a parallel build and
#          install-strip (non-debug) is done and an msi installer produced.

set -e

if [ -z $SUDO_USER ]; then
    echo "ERROR: $0 must be executed with sudo"
    exit 1
fi

. build.sh
parse-args "$@"

chroot_dependencies=(debootstrap debian-archive-keyring)
versionfile=chroot_version

base="$(realpath ../..)"

# May be set from external environment. Otherwise use chroot
# directory in agents/windows
export CHROOT_PATH=${CHROOT_PATH:-$base/agents/windows/chroot}
export CHROOT_BUILD_DIR=${CHROOT_BUILD_DIR:-build}
export CHROOT_NAME=${CHROOT_NAME:-WinAgent}

if [ ! -f "$base/agents/windows/$versionfile" ] ; then
    echo "Error: File $base/agents/windows/$versionfile not found."
    echo "Is your Git repository up to date?"
    exit 1
fi

# Realize a file based locking for the chroot setup. There must be only
# a single caller executing the setup of a chroot. Once the chroot was
# created, multiple jobs may be executed in the chroot simultaneously,
# but the setup must be performed only by a single job.
(
    echo "[MAKE-CHROOT LOCK] aquire"
    flock -x -w 1800 200 || (echo "[MAKE-CHROOT LOCK] ERROR: Failed to get lock within 1800 seconds" ; exit 1)
    echo "[MAKE-CHROOT LOCK] got it"

    # Ensure that chroot exists and is up to date:
    # ensure that versionfile exists...
    if [ ! -f "$CHROOT_PATH/$versionfile" ] ; then
        echo "chroot version not found."
        create=yes
        #  ... and it is up to date.
    elif [ $(cat "$CHROOT_PATH/$versionfile") -ne \
           $(cat "$base/agents/windows/$versionfile") ] ; then
        echo "chroot is out of date."
        create=yes
    fi

    if [ -z $create ] ; then
        echo "chroot is up to date."
    else
        apt-get -y install "${chroot_dependencies[@]}"
        VERSIONFILE=$versionfile CHROOT_PATH=$CHROOT_PATH \
            CHROOT_BUILD_DIR=$CHROOT_BUILD_DIR ./make-chroot
    fi

    # Add user for building windows agent without root privileges.
    # Check that user does not exist before since SUDO_USER may be root, as well.
    #
    # Do this not only during setup, because the setup is only executed once and
    # the build may be started with different SUDO_USER users).
    if ! grep -q "\<${SUDO_USER}\>" "$CHROOT_PATH/etc/passwd" ; then
        ./do-chroot "useradd -lmo -u $(id -u $SUDO_USER) -s /bin/bash $SUDO_USER"
    fi
) 200>/var/lock/cmk-make-agent_${CHROOT_PATH//\//-}.lock
echo "[MAKE-CHROOT LOCK] released"

# Build the Windows agent within chroot by calling the 'build-agent' script as
# $SUDO_USER.
./do-chroot \
        "/bin/su - $SUDO_USER -c bash -c 'CHROOT_NAME=$CHROOT_NAME CHROOT_PATH=$CHROOT_PATH CHROOT_BUILD_DIR=$CHROOT_BUILD_DIR NEW_VERSION=$NEW_VERSION /$CHROOT_BUILD_DIR/agents/windows/build-agent -j${njobs} $targets'"
