#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
"""
Special agent for monitoring Amazon web services (AWS) with Check_MK.
"""

import sys
import argparse
import boto3


def parse_arguments(argv):
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--debug", action="store_true", help='''Raise Python exceptions.''')
    parser.add_argument("--aws-access-key-id", help='''The access key for your AWS account.''')
    parser.add_argument("--aws-secret-access-key", help='''The secret key for your AWS account.''')
    parser.add_argument("--region", help='''The region to use.''')
    return parser.parse_args(argv)


def main():
    args = parse_arguments(sys.argv[1:])

    if not args.aws_access_key_id or not args.aws_secret_access_key or not args.region:
        sys.stderr.write("Access key ID, secret access key and region must be set.\n")
        return 1

    s = boto3.session.Session(
        aws_access_key_id=args.aws_access_key_id,
        aws_secret_access_key=args.aws_secret_access_key,
        region_name=args.region)

    try:
        _cloudwatch = s.client('cloudwatch')
    except ValueError, err:
        # If region name is not valid we get a ValueError
        # but not in all cases, eg.:
        # 1. 'eu-central-' raises a ValueError
        # 2. 'foobar' does not raise a ValueError
        # In the second case we get an exception raised by botocore
        # during we execute an operation, eg. cloudwatch.get_metrics(**kwargs):
        # - botocore.exceptions.EndpointConnectionError
        sys.stderr.write("ERROR: %s\n" % err)
        return 3
    return 0


if __name__ == "__main__":
    sys.exit(main())
